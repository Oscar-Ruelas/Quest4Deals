
=======================================
FILE: quest4dealsweb.sln
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.sln
=======================================

ï»¿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35806.99 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{54A90642-561A-4BB1-A94E-469ADEE60C69}") = "quest4dealsweb.client", "quest4dealsweb.client\quest4dealsweb.client.esproj", "{5D5E7572-A1D7-A358-A8E3-2162CD72176D}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "quest4dealsweb.Server", "quest4dealsweb.Server\quest4dealsweb.Server.csproj", "{7FE9C367-F73F-4F6D-967A-F6DC73013F25}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Debug|Any CPU.Deploy.0 = Debug|Any CPU
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Release|Any CPU.Build.0 = Release|Any CPU
		{5D5E7572-A1D7-A358-A8E3-2162CD72176D}.Release|Any CPU.Deploy.0 = Release|Any CPU
		{7FE9C367-F73F-4F6D-967A-F6DC73013F25}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{7FE9C367-F73F-4F6D-967A-F6DC73013F25}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{7FE9C367-F73F-4F6D-967A-F6DC73013F25}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{7FE9C367-F73F-4F6D-967A-F6DC73013F25}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {D8FE82D3-F85D-4957-8AAD-76751C92B734}
	EndGlobalSection
EndGlobal



=======================================
FILE: Dashboard.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\Dashboard.tsx
=======================================

import Gamecard, { Game } from "./Gamecard";
import { useEffect, useState, useRef, useCallback } from "react";

interface DashboardProps {
  isFiltered: boolean;
  filters: {
    platform: string;
    genre: string;
    price: string;
  };
  isSearching: boolean;
  searchQuery: string;
}

function Dashboard({
  isFiltered,
  filters,
  isSearching,
  searchQuery,
}: DashboardProps) {
  const [games, setGames] = useState<Game[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(1);

  const seenGameIds = useRef<Set<number>>(new Set());
  const observer = useRef<IntersectionObserver | null>(null);
  const sentinelRef = useRef<HTMLDivElement | null>(null);
  const prefetchCache = useRef<{ [key: number]: Game[] }>({});
  const isFetching = useRef<boolean>(false);

  const LIMIT = 20;
  const MAX_PREFETCH_PAGES = 1;

  const fetchGames = useCallback(
    async (pageToFetch: number) => {
      try {
        let url = "";

        if (isFiltered) {
          url = `/api/nexarda/games/filter?genre=${filters.genre.toLowerCase()}&platform=${filters.platform.toLowerCase()}&priceSort=${
            filters.price
          }&page=${pageToFetch}&limit=${LIMIT}`;
        } else if (isSearching) {
          url = `/api/nexarda/search?query=${searchQuery}`;
        } else {
          url = `/api/nexarda/games?page=${pageToFetch}&limit=${LIMIT}`;
        }

        const response = await fetch(url);
        if (!response.ok)
          throw new Error(`HTTP error! status: ${response.status}`);

        const data = await response.json();
        const parsed = typeof data === "string" ? JSON.parse(data) : data;

        const newGames =
          parsed.results?.items?.filter((game: Game) => {
            const id = game.game_info.id;
            if (seenGameIds.current.has(id)) return false;
            seenGameIds.current.add(id);
            return true;
          }) || [];
        console.log(newGames);
        return newGames;
      } catch (err) {
        console.error("Error fetching games:", err);
        setError("Failed to load games. Please try again later.");
        return [];
      }
    },
    [LIMIT, isFiltered, filters, isSearching, searchQuery]
  );

  const loadGames = useCallback(async () => {
    isFetching.current = true;
    setLoading(true);
    setError(null);

    let newGames = prefetchCache.current[page] || [];

    if (newGames.length === 0) {
      newGames = await fetchGames(page);
    }

    setGames((prev) => [...prev, ...newGames]);

    // Prefetch up to MAX_PREFETCH_PAGES ahead
    for (let i = 1; i <= MAX_PREFETCH_PAGES; i++) {
      const nextPage = page + i;
      if (!prefetchCache.current[nextPage]) {
        const nextGames = await fetchGames(nextPage);
        prefetchCache.current[nextPage] = nextGames;
      }
    }

    setLoading(false);
    isFetching.current = false;
  }, [page, fetchGames]);

  useEffect(() => {
    const delay = setTimeout(() => {
      loadGames();
    }, 100); // debounce for smoother UX

    return () => clearTimeout(delay);
  }, [loadGames]);

  useEffect(() => {
    if (observer.current) observer.current.disconnect();

    observer.current = new IntersectionObserver(
      (entries) => {
        const firstEntry = entries[0];
        if (firstEntry.isIntersecting && !loading && !isFetching.current) {
          isFetching.current = true;
          setPage((prev) => prev + 1);
        }
      },
      {
        rootMargin: "90px", // reduced margin for more controlled loading
      }
    );

    if (sentinelRef.current) {
      observer.current.observe(sentinelRef.current);
    }

    return () => observer.current?.disconnect();
  }, [loading]);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "r" || event.key === "R") {
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);

  return (
    <div className="dashboard">
      {games.map((game) => (
        <Gamecard key={game.game_info.id} game={game} />
      ))}

      <div ref={sentinelRef} style={{ height: "100px" }} />
      {loading && <p>Loading more games...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}
    </div>
  );
}

export default Dashboard;



=======================================
FILE: Filter.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\Filter.tsx
=======================================

interface FilterProps {
  filters: {
    platform: string;
    genre: string;
    price: string;
  };
  setFilters: (filters: any) => void;
  setIsFiltered: (isFiltered: boolean) => void;
  onReload: () => void;
}

function Filter({ filters, setFilters, setIsFiltered, onReload }: FilterProps) {
  /**
   * Updates the filter state based on the selected filter type and value.
   * If the selected value is not "All", "Genre", or "PriceOrder", it sets the filtered state to true because it means we are filtering.
   *
   * @param type - The type of filter being updated (e.g., "category", "price").
   * @param value - The selected value for the filter.
   */
  const handleFilterChange = (type: string, value: string) => {
    setFilters({
      ...filters,
      [type]: value,
    });
  };

  const handleApplyButton = () => {
    if (
      filters.genre !== "All" &&
      filters.platform !== "Genre" &&
      filters.price !== "PriceOrder"
    ) {
      setIsFiltered(true);
      onReload(); // refreshes the dashboard
    }
  };

  const handleClearButton = () => {
    setFilters({
      platform: "All",
      genre: "Genre",
      price: "PriceOrder",
    });
    setIsFiltered(false);
    onReload(); // refreshes the dashboard
  };

  return (
    <div className="filter">
      <h2>Filters</h2>
      <select
        name="platform"
        id="platform"
        value={filters.platform}
        onChange={(e) => handleFilterChange("platform", e.target.value)}
      >
        <option value="All">Platform</option>
        <option value="steam">Steam</option>
        <option value="epic-games">Epic Games</option>
        <option value="Playstation">Playstation</option>
        <option value="Xbox">Xbox</option>
        <option value="Nintendo">Nintendo</option>
      </select>
      <select
        name="genre"
        id="genre"
        value={filters.genre}
        onChange={(e) => handleFilterChange("genre", e.target.value)}
      >
        <option value="Genre">Genre</option>
        <option value="Action">Action</option>
        <option value="Adventure">Adventure</option>
        <option value="RPG">RPG</option>
        <option value="Sports">Sports</option>
        <option value="Strategy">Strategy</option>
        <option value="Cozy">Cozy</option>
        <option value="Simulation">Simulation</option>
      </select>
      <select
        name="price"
        id="price"
        value={filters.price}
        onChange={(e) => handleFilterChange("price", e.target.value)}
      >
        <option value="PriceOrder">Price Order By</option>
        <option value="asc">Lowest to Highest</option>
        <option value="desc">Highest to Lowest</option>
      </select>
      <button type="submit" onClick={handleApplyButton}>
        Apply
      </button>
      <button onClick={handleClearButton}>Clear</button>
    </div>
  );
}

export default Filter;



=======================================
FILE: Gamecard.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\Gamecard.tsx
=======================================

import { useLocation, useNavigate } from "react-router-dom";

// ESRB symbol mapping
const esrbSymbolMap: Record<string, { symbol: string; label: string }> = {
    "Everyone": { symbol: "E", label: "Everyone" },
    "Everyone 10+": { symbol: "E10+", label: "Everyone 10+" },
    "Teen": { symbol: "T", label: "Teen" },
    "Mature": { symbol: "M", label: "Mature" },
    "Adults": { symbol: "A", label: "Adults Only" },
    "Rating Pending": { symbol: "RP", label: "Rating Pending" },
};

interface Platform {
    name: string;
    slug: string;
    icon: string;
}

interface AgeRating {
    id: string;
    name: string;
}

interface GameInfo {
    id: number;
    lowest_price: number;
    short_desc: string;
    platforms: Platform[];
    age_ratings: AgeRating[];
}

export interface Game {
    image: string;
    title: string;
    game_info: GameInfo;
}

function Gamecard({ game }: { game: Game }) {
    const navigate = useNavigate();
    const location = useLocation();

    const handleClick = () => {
        const cleanTitle = game.title.replace(/\s*\(.*?\)\s*/g, "").trim();
        navigate(`/details/${game.game_info.id}/${encodeURIComponent(cleanTitle)}`, {
            state: { backgroundLocation: location },
        });
    };

    const esrbRating = game.game_info.age_ratings.find((rating) =>
        rating.id.startsWith("esrb")
    );

    let esrb: { symbol: string; label: string } | undefined;

    if (esrbRating) {
        const match = esrbRating.name.match(/ESRB\s([A-Za-z+ ]+)/);
        const keyword = match?.[1]?.trim();

        if (keyword && esrbSymbolMap[keyword]) {
            esrb = esrbSymbolMap[keyword];
        }
    }

    const shortDescription =
        game.game_info.short_desc.length > 100
            ? game.game_info.short_desc.slice(0, 97) + "..."
            : game.game_info.short_desc;

    return (
        <div className="gamecard" onClick={handleClick} style={{ cursor: "pointer" }}>
            <img src={game.image} alt="Game Image" />
            <h2>{game.title}</h2>

            <div className="game-info">
                <p className="lowest-price">
                    Lowest Price: {game.game_info.lowest_price === 0 ? "Free" : `$${game.game_info.lowest_price}`}
                </p>
                <p className="desc">{shortDescription}</p>
                <div className="age-rating">
                    <strong>Rating:</strong>{" "}
                    {esrb ? (
                        `${esrb.symbol} (${esrb.label})`
                    ) : (
                        <span style={{ color: "#aaa", fontStyle: "italic" }}>Not Rated</span>
                    )}
                </div>
            </div>
        </div>
    );
}

export default Gamecard;



=======================================
FILE: GameDetails.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\GameDetails.tsx
=======================================

import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import "../styling/GameDetails.css";
import WatchlistButton from './WatchlistButton';

// In-memory cache for game data
const gameCache = new Map();

function LoadingMessage() {
    return (
        <div className="modal-overlay" style={{ backgroundColor: 'rgba(0, 0, 0, 0.8)' }}>
            <div
                className="modal-content"
                style={{
                    width: 'auto',
                    minWidth: '300px',
                    textAlign: 'center',
                    padding: '40px',
                    backgroundColor: '#1f2937'
                }}
            >
                <div className="loading-spinner" style={{
                    marginBottom: '20px'
                }}>
                    <div style={{
                        width: '40px',
                        height: '40px',
                        margin: '0 auto',
                        border: '4px solid #3b82f6',
                        borderTop: '4px solid transparent',
                        borderRadius: '50%',
                        animation: 'spin 1s linear infinite'
                    }}></div>
                </div>
                <div style={{
                    fontSize: '1.25rem',
                    color: '#ffffff',
                    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
                }}>
                    Getting Game Info...
                </div>
            </div>
            <style>
                {`
                    @keyframes spin {
                        0% { transform: rotate(0deg); }
                        100% { transform: rotate(360deg); }
                    }
                `}
            </style>
        </div>
    );
}

interface Platform {
    name: string;
    slug: string;
    icon: string;
}

interface StoreOffer {
    url: string;
    store: {
        name: string;
        image: string;
    };
    edition: string;
    price: number;
    platform?: string;
}

interface PriceHistoryItem {
    id: number;
    gameId: number;
    price: number;
    recordedAt: string;
}

interface GameInfo {
    id: number;
    title: string;
    image: string;
    description: string;
    platforms: Platform[];
    genres: string[];
}

function GameDetails({ isModal = false }: { isModal?: boolean }) {
    const { title } = useParams();
    const navigate = useNavigate();

    const [loading, setLoading] = useState(true);
    const [gameInfo, setGameInfo] = useState<GameInfo>({
        id: 0,
        title: "",
        image: "",
        description: "",
        platforms: [],
        genres: []
    });
    const [storeOffers, setStoreOffers] = useState<StoreOffer[]>([]);
    const [priceHistory, setPriceHistory] = useState<PriceHistoryItem[]>([]);
    const [notFound, setNotFound] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // Filter out demos, free trials, and games with no price
    const getValidStoreOffers = () => {
        return storeOffers.filter(offer =>
            offer.price > 0 &&
            offer.platform &&
            !offer.edition.toLowerCase().includes('demo') &&
            !offer.edition.toLowerCase().includes('trial')
        );
    };

    useEffect(() => {
        async function fetchGame() {
            if (!title) {
                setNotFound(true);
                return;
            }

            // Check cache first
            if (gameCache.has(title)) {
                const cached = gameCache.get(title);
                setGameInfo(cached.gameInfo);
                setStoreOffers(cached.storeOffers);
                setPriceHistory(cached.priceHistory);
                setNotFound(false);
                setError(null);
                setLoading(false);
                return;
            }

            setLoading(true);
            setNotFound(false);

            try {
                const res = await fetch(`/api/nexarda/search?query=${encodeURIComponent(title)}`);

                if (!res.ok) {
                    throw new Error(`Error fetching search results: ${res.status}`);
                }

                const data = await res.json();
                const game = data?.results?.items?.[0];

                if (!game) {
                    setNotFound(true);
                    return;
                }

                // Fetch genres from RAWG
                const genresRes = await fetch(`/api/rawg/genres/${encodeURIComponent(game.title)}`);
                let genres: string[] = [];

                if (genresRes.ok) {
                    const genresData = await genresRes.json();
                    genres = genresData.genres || [];
                }

                // Update game info
                const newGameInfo = {
                    id: game.game_info.id,
                    title: game.title,
                    image: game.image,
                    description: game.game_info.short_desc,
                    platforms: game.game_info.platforms || [],
                    genres: genres
                };
                setGameInfo(newGameInfo);

                // Fetch prices
                const priceRes = await fetch(`/api/nexarda/prices?id=${game.game_info.id}`);

                if (!priceRes.ok) {
                    throw new Error(`Error fetching price data: ${priceRes.status}`);
                }

                const priceData = await priceRes.json();
                let offers: StoreOffer[] = [];

                if (priceData?.prices?.list) {
                    offers = priceData.prices.list
                        .filter((offer: any) => offer.available && offer.url)
                        .map((offer: any) => {
                            const editionFull = offer.edition_full || "";
                            let platform = "";

                            if (editionFull) {
                                const match = editionFull.match(/FOR:(.+)$/i);
                                if (match) {
                                    platform = match[1].trim();
                                }
                            }

                            return {
                                url: offer.url,
                                store: {
                                    name: offer.store.name,
                                    image: offer.store.image,
                                },
                                edition: offer.edition || "Standard Edition",
                                price: offer.price,
                                platform,
                            };
                        });
                }
                setStoreOffers(offers);

                // Price history logic
                let newPriceHistory: PriceHistoryItem[] = [];
                if (offers && offers.length > 0) {
                    const lowestOffer = offers.reduce(
                        (lowest, current) => current.price < lowest.price ? current : lowest,
                        offers[0]
                    );

                    const priceHistoryEntry: PriceHistoryItem = {
                        id: 0,
                        gameId: game.game_info.id,
                        price: lowestOffer.price,
                        recordedAt: new Date().toISOString()
                    };

                    newPriceHistory = [priceHistoryEntry];
                    setPriceHistory(newPriceHistory);
                } else {
                    setPriceHistory([]);
                }

                // Save to cache
                gameCache.set(title, {
                    gameInfo: newGameInfo,
                    storeOffers: offers,
                    priceHistory: newPriceHistory
                });

            } catch (err) {
                console.error("Error in fetchGame:", err);
                setError(err instanceof Error ? err.message : "Unknown error occurred");
            } finally {
                setLoading(false);
            }
        }

        fetchGame();
    }, [title]);

    const handleClose = () => {
        navigate('/');
    };

    useEffect(() => {
        if (!isModal) return;

        const handleKeyDown = (event: KeyboardEvent) => {
            if (event.key === "Escape" || event.key === "Enter") {
                handleClose();
            }
        };

        window.addEventListener("keydown", handleKeyDown);
        return () => window.removeEventListener("keydown", handleKeyDown);
    }, [isModal]);

    // Calculate price history stats
    const calculatePriceStats = () => {
        if (!priceHistory || priceHistory.length === 0) return null;

        const prices = priceHistory.map(item => item.price);
        const lowestPrice = Math.min(...prices);
        const highestPrice = Math.max(...prices);
        const currentPrice = prices[prices.length - 1];
        const averagePrice = prices.reduce((sum, price) => sum + price, 0) / prices.length;

        return {
            lowestPrice,
            highestPrice,
            currentPrice,
            averagePrice
        };
    };

    const priceStats = calculatePriceStats();

    // Find the lowest price from store offers
    const getLowestPrice = () => {
        const validOffers = getValidStoreOffers();
        if (validOffers.length === 0) return null;
        return validOffers.reduce(
            (min, offer) => offer.price < min ? offer.price : min,
            validOffers[0].price
        );
    };

    const lowestPrice = getLowestPrice();
    const validStoreOffers = getValidStoreOffers();

    if (loading) {
        return <LoadingMessage />;
    }

    if (error) {
        return (
            <div className="game-details error">
                <p>Error loading game details: {error}</p>
                <button onClick={handleClose}>Go Back</button>
            </div>
        );
    }

    if (notFound) {
        return (
            <div className="game-details not-found">
                <p>Game not found.</p>
                <button onClick={handleClose}>Go Back</button>
            </div>
        );
    }

    return (
        <div className={isModal ? "modal-overlay" : "game-details-container"}>
            <div className={isModal ? "modal-content" : "game-details-content"}>
                {isModal && (
                    <button className="modal-close" onClick={handleClose} aria-label="Close">
                        â
                    </button>
                )}

                <div className="details-header">
                    <h1 className="details-title">{gameInfo.title}</h1>
                </div>

                <div className="details-main">
                    <div className="details-image-container">
                        <img className="details-image" src={gameInfo.image} alt={gameInfo.title} />
                        <div className="watchlist-section">
                            <WatchlistButton
                                id={gameInfo.id}
                                title={gameInfo.title}
                                storeOffers={validStoreOffers}
                                genre={gameInfo.genres.join(', ')}
                            />
                        </div>
                    </div>

                    <div className="details-info">
                        <div className="details-description">{gameInfo.description}</div>

                        <div className="details-genres-container">
                            <h2 className="details-subtitle">Genres</h2>
                            <p className="details-genres">
                                {gameInfo.genres.length > 0
                                    ? gameInfo.genres.join(", ")
                                    : "No genre information available"}
                            </p>
                        </div>

                        <div className="details-platforms-container">
                            <h2 className="details-subtitle">Platforms</h2>
                            <p className="details-platforms">
                                {gameInfo.platforms
                                    .filter((p) => !["Other", "Xbox Play Anywhere"].includes(p.name))
                                    .map((p) => {
                                        switch (p.name) {
                                            case "EA Desktop App":
                                                return "EA";
                                            case "Epic Games Launcher":
                                                return "Epic Games";
                                            case "Ubisoft Connect":
                                                return "Ubisoft";
                                            default:
                                                return p.name;
                                        }
                                    })
                                    .join(", ")}
                            </p>
                        </div>
                    </div>
                </div>

                <div className="details-offers">
                    <h2 className="details-subtitle">Store Offers</h2>

                    {validStoreOffers.length > 0 ? (
                        <div className="store-offers-grid">
                            {validStoreOffers.map((offer, index) => (
                                <div className="store-offer" key={index}>
                                    <div className="store-info">
                                        <img
                                            src={offer.store.image}
                                            alt={offer.store.name}
                                            className="store-image"
                                        />
                                        <span className="store-name">{offer.store.name}</span>
                                    </div>

                                    <div className="offer-details">
                                        <span className="offer-edition">{offer.edition}</span>
                                        {offer.platform && (
                                            <span className="offer-platform">{offer.platform}</span>
                                        )}
                                        <span className="offer-price">${offer.price.toFixed(2)}</span>
                                    </div>

                                    <a
                                        href={offer.url}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                        className="buy-button"
                                    >
                                        Buy Now
                                    </a>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <p className="no-offers">No store offers available at this time.</p>
                    )}
                </div>

                <div className="price-history-section">
                    <h2 className="details-subtitle">Price History</h2>

                    {lowestPrice !== null ? (
                        <div className="price-history-content">
                            <div className="price-stats">
                                <div className="stat-item">
                                    <span className="stat-label">Current Best Price</span>
                                    <span className="stat-value">${lowestPrice.toFixed(2)}</span>
                                </div>
                                {priceStats && (
                                    <>
                                        <div className="stat-item">
                                            <span className="stat-label">Lowest Tracked Price</span>
                                            <span className="stat-value">${priceStats.lowestPrice.toFixed(2)}</span>
                                        </div>
                                        <div className="stat-item">
                                            <span className="stat-label">Highest Tracked Price</span>
                                            <span className="stat-value">${priceStats.highestPrice.toFixed(2)}</span>
                                        </div>
                                        <div className="stat-item">
                                            <span className="stat-label">Average Price</span>
                                            <span className="stat-value">${priceStats.averagePrice.toFixed(2)}</span>
                                        </div>
                                    </>
                                )}
                            </div>

                            <div className="new-price-tracking">
                                <p>We've started tracking prices for this game.</p>
                                <p>The current best price is <strong>${lowestPrice.toFixed(2)}</strong>.</p>
                                <p>Check back later to see price trend information!</p>
                            </div>
                        </div>
                    ) : (
                        <p className="no-price-history">
                            No price information available for this game.
                        </p>
                    )}
                </div>

                {!isModal && (
                    <button className="back-button" onClick={handleClose}>
                        Back to Search
                    </button>
                )}
            </div>
        </div>
    );
}

export default GameDetails;


=======================================
FILE: login.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\login.tsx
=======================================

import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "../styling/Login.css";

const Login = () => {
  const [userNameOrEmail, setUserNameOrEmail] = useState("");
  const [password, setPassword] = useState("");
  const [keepLoggedIn, setKeepLoggedIn] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = localStorage.getItem("user") || sessionStorage.getItem("user");
    if (storedUser) {
      // If user is already logged in, redirect to return path or home
      const returnPath = sessionStorage.getItem('returnTo') || '/';
      sessionStorage.removeItem('returnTo'); // Clean up
      navigate(returnPath);
    }
  }, [navigate]);

  const handleLogin = async () => {
    setErrorMessage("");
    setIsLoggingIn(true);
    try {
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userNameOrEmail, password }),
        credentials: "include",
      });

      if (!response.ok) {
        const errorData = await response.json();
        if (errorData?.message === "User not found") {
          setErrorMessage("User does not exist.");
        } else if (errorData?.message === "Incorrect password") {
          setErrorMessage("Incorrect password.");
        } else {
          setErrorMessage("Login failed. Please try again.");
        }
        setIsLoggingIn(false);
        return;
      }

      const data = await response.json();
      console.log("Login successful:", data);

      if (keepLoggedIn) {
        localStorage.setItem("user", JSON.stringify(data.user));
      } else {
        sessionStorage.setItem("user", JSON.stringify(data.user));
      }

      // Get the return path and navigate back
      const returnPath = sessionStorage.getItem('returnTo') || '/';
      sessionStorage.removeItem('returnTo'); // Clean up

      // Short delay to show "Logging in..." message
      setTimeout(() => navigate(returnPath), 1000);
    } catch (error) {
      console.error("Error during login:", error);
      setErrorMessage("An error occurred. Please try again.");
      setIsLoggingIn(false);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleLogin();
    }
  };

  return (
      <div className="login-page">
        <div className="login-container">
          <img src="../../public/logo.png" alt="Quest4Deals Logo" />
          <h2>Sign In</h2>
          <input
              type="text"
              placeholder="Email or Username"
              value={userNameOrEmail}
              onChange={(e) => setUserNameOrEmail(e.target.value)}
              onKeyDown={handleKeyDown}
          />
          <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyDown={handleKeyDown}
          />

          {errorMessage && <p className="error-message">{errorMessage}</p>}
          {isLoggingIn && <p className="logging-in-message">Logging in...</p>}

          <button onClick={handleLogin} disabled={isLoggingIn}>
            Sign In
          </button>

          <div className="login-options">
            <div className="remember-me">
              <input
                  type="checkbox"
                  id="keepLoggedIn"
                  checked={keepLoggedIn}
                  onChange={() => setKeepLoggedIn(!keepLoggedIn)}
              />
              <label htmlFor="keepLoggedIn">Remember me</label>
            </div>
            <a href="#" className="help-link">
              Need help?
            </a>
          </div>

          <p className="signup-text">
            New to Quest4Deals? <a href="/register">Sign up now</a>
          </p>
        </div>
      </div>
  );
};

export default Login;


=======================================
FILE: Navbar.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\Navbar.tsx
=======================================

import { Link, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import "../styling/Navbar.css";

interface NavbarProps {
  setIsSearching: (isSearching: boolean) => void;
  setSearchQuery: (query: string) => void;
  onReload: () => void;
}

const Navbar = ({ setIsSearching, setSearchQuery, onReload }: NavbarProps) => {
  const [user, setUser] = useState<{ id: string; userName: string } | null>(
    null
  );
  const [menuOpen, setMenuOpen] = useState(false);
  const navigate = useNavigate();

  // â Check for logged-in user
  useEffect(() => {
    const storedUser =
      localStorage.getItem("user") || sessionStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // â Redirect to homepage when logged out
  useEffect(() => {
    if (!user) {
      navigate("/");
    }
  }, [user, navigate]);

  // â Handle Logout
  const handleLogout = () => {
    localStorage.removeItem("user");
    sessionStorage.removeItem("user");
    setUser(null);
  };

  // â Scroll to top on logo click/touch
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleSearchButton = () => {
    setIsSearching(true);
    onReload();
  };

  const handleClearSearchButton = () => {
    setIsSearching(false);
    setSearchQuery("");
    onReload();
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      handleSearchButton();
    }
  };

  return (
    <div className="navbar">
      <input
        type="search"
        placeholder="Search Games"
        className="search-bar"
        onChange={(e) => setSearchQuery(e.target.value)}
        onKeyDown={handleKeyDown}
      />
      <button type="submit" onClick={handleSearchButton}>
        Search
      </button>
      <button onClick={handleClearSearchButton}>Clear Search</button>
      <img
        src="/logo.png"
        alt="Quest4Deals Logo"
        className="logo"
        onClick={scrollToTop}
        onTouchStart={scrollToTop}
      />

      {user ? (
        <div className="user-menu">
          <button onClick={() => setMenuOpen(!menuOpen)} className="user-btn">
            {user.userName} â
          </button>

          {menuOpen && (
            <div className="dropdown-menu">
              <Link to="/wishlist" className="dropdown-item">
                View Wishlist
              </Link>
              <Link to={`/edit-profile/${user?.id}`} className="dropdown-item">
                Edit Profile
              </Link>
              <button
                onClick={handleLogout}
                className="dropdown-item logout-btn"
              >
                Logout
              </button>
            </div>
          )}
        </div>
      ) : (
        <Link to="/login" className="sign-in">
          Sign In
        </Link>
      )}
    </div>
  );
};

export default Navbar;



=======================================
FILE: PriceHistoryChart.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\PriceHistoryChart.tsx
=======================================

// src/components/PriceHistoryChart.tsx

import React, { useEffect, useState } from 'react';
import { Line } from 'react-chartjs-2';
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
} from 'chart.js';

// Register ChartJS components
ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
);

interface PriceHistoryItem {
    id: number;
    gameId: number;
    price: number;
    recordedAt: string;
}

interface PriceHistoryStats {
    currentPrice: number;
    lowestPrice: number;
    highestPrice: number;
    averagePrice: number;
    priceChangesCount: number;
    latestChange: PriceHistoryItem | null;
}

interface PriceHistoryData {
    gameId: number;
    gameTitle: string;
    priceHistory: PriceHistoryItem[];
    stats: PriceHistoryStats;
}

interface PriceHistoryChartProps {
    gameId: number;
}

const PriceHistoryChart: React.FC<PriceHistoryChartProps> = ({ gameId }) => {
    const [priceData, setPriceData] = useState<PriceHistoryData | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchPriceHistory = async () => {
            try {
                setLoading(true);
                const response = await fetch(`/api/price-history/stats/${gameId}`);

                if (!response.ok) {
                    throw new Error(`Error fetching price history: ${response.statusText}`);
                }

                const data = await response.json();
                setPriceData(data);
            } catch (err: any) {
                console.error('Error fetching price history:', err);
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        if (gameId) {
            fetchPriceHistory();
        }
    }, [gameId]);

    if (loading) {
        return <div className="loading-spinner">Loading price history...</div>;
    }

    if (error) {
        return <div className="error-message">Error: {error}</div>;
    }

    if (!priceData || !priceData.priceHistory.length) {
        return (
            <div className="price-history-chart empty-chart">
                <h3>Price History</h3>
                <p>No price history available yet. Check back later!</p>
            </div>
        );
    }

    // Format data for chart
    const dates = priceData.priceHistory.map(item => new Date(item.recordedAt).toLocaleDateString());
    const prices = priceData.priceHistory.map(item => item.price);

    const chartData = {
        labels: dates,
        datasets: [
            {
                label: 'Price History',
                data: prices,
                fill: false,
                backgroundColor: '#4472CA',
                borderColor: '#F79256',
                tension: 0.1
            }
        ]
    };

    const chartOptions = {
        responsive: true,
        plugins: {
            legend: {
                position: 'top' as const,
            },
            title: {
                display: true,
                text: 'Price History',
                color: 'white'
            },
            tooltip: {
                callbacks: {
                    label: function (context: any) {
                        return `$${context.raw.toFixed(2)}`;
                    }
                }
            }
        },
        scales: {
            x: {
                ticks: {
                    color: 'white'
                },
                grid: {
                    color: 'rgba(255, 255, 255, 0.1)'
                }
            },
            y: {
                ticks: {
                    color: 'white',
                    callback: function (value: any) {
                        return '$' + value;
                    }
                },
                grid: {
                    color: 'rgba(255, 255, 255, 0.1)'
                }
            }
        }
    };

    const stats = priceData.stats;

    return (
        <div className="price-history-chart">
            <h3>Price History</h3>
            <div className="chart-container">
                <Line data={chartData} options={chartOptions} />
            </div>
            <div className="price-stats">
                <div className="stat">
                    <span>Current: </span>
                    <span className="price">${stats.currentPrice.toFixed(2)}</span>
                </div>
                <div className="stat">
                    <span>Lowest: </span>
                    <span className="price">${stats.lowestPrice.toFixed(2)}</span>
                </div>
                <div className="stat">
                    <span>Highest: </span>
                    <span className="price">${stats.highestPrice.toFixed(2)}</span>
                </div>
                <div className="stat">
                    <span>Average: </span>
                    <span className="price">${stats.averagePrice.toFixed(2)}</span>
                </div>
                {stats.latestChange && (
                    <div className="stat last-change">
                        <span>Last changed: </span>
                        <span className="date">{new Date(stats.latestChange.recordedAt).toLocaleDateString()}</span>
                    </div>
                )}
            </div>
        </div>
    );
};

export default PriceHistoryChart;



=======================================
FILE: WatchlistButton.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\components\WatchlistButton.tsx
=======================================

ï»¿import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../styling/WatchlistButton.css';

interface StoreOffer {
    url: string;
    store: {
        name: string;
        image: string;
    };
    edition: string;
    price: number;
    platform?: string;
}

interface WatchlistButtonProps {
    id: number | null;
    title: string;
    storeOffers: StoreOffer[];
    genre: string;
}

function WatchlistButton({ id, title, storeOffers, genre }: WatchlistButtonProps) {
    const [isInWatchlist, setIsInWatchlist] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [getNotified, setGetNotified] = useState(true);
    const [selectedPlatform, setSelectedPlatform] = useState<string>('');
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const navigate = useNavigate();

    // Check if user is authenticated
    useEffect(() => {
        const checkAuth = () => {
            const user = localStorage.getItem('user') || sessionStorage.getItem('user');
            setIsAuthenticated(!!user);
            return !!user;
        };

        if (checkAuth()) {
            checkWatchlistStatus();
        }
    }, []);

    // Get valid platforms with prices (excluding demos and free trials)
    const getPlatformsWithPrices = () => {
        const platformPrices = new Map<string, number>();
        storeOffers.forEach(offer => {
            if (
                offer.price > 0 &&
                offer.platform &&
                !offer.edition.toLowerCase().includes('demo') &&
                !offer.edition.toLowerCase().includes('trial')
            ) {
                const currentPrice = platformPrices.get(offer.platform);
                if (!currentPrice || offer.price < currentPrice) {
                    platformPrices.set(offer.platform, offer.price);
                }
            }
        });
        return platformPrices;
    };

    // Set default platform if only one is available
    useEffect(() => {
        if (isAuthenticated && !isInWatchlist) {
            const platformPrices = getPlatformsWithPrices();
            if (platformPrices.size === 1) {
                setSelectedPlatform(Array.from(platformPrices.keys())[0]);
            }
        }
    }, [isAuthenticated, isInWatchlist]);

    const checkWatchlistStatus = async () => {
        if (!id) return;

        try {
            setIsLoading(true);
            const response = await fetch(`/api/watchlist/check/${id}`, {
                credentials: 'include'
            });

            if (!response.ok) {
                if (response.status === 401) {
                    handleUnauthorized();
                    return;
                }
                throw new Error('Failed to check watchlist status');
            }

            const data = await response.json();
            setIsInWatchlist(data.isWatchlisted);
            setGetNotified(data.getNotified);
            if (data.platform) {
                setSelectedPlatform(data.platform);
            }
        } catch (err) {
            console.error('Error checking watchlist status:', err);
            setError('Failed to check watchlist status');
        } finally {
            setIsLoading(false);
        }
    };

    const handleUnauthorized = () => {
        setIsAuthenticated(false);
        localStorage.removeItem('user');
        sessionStorage.removeItem('user');
        // Store current path before redirecting
        sessionStorage.setItem('returnTo', window.location.pathname);
        navigate('/login');
    };

    const getCurrentPrice = (): number => {
        const platformPrices = getPlatformsWithPrices();
        return platformPrices.get(selectedPlatform) || 0;
    };

    const handleWatchlistClick = () => {
        if (!isAuthenticated) {
            // Store current path before redirecting to login
            sessionStorage.setItem('returnTo', window.location.pathname);
            navigate('/login');
            return;
        }
        toggleWatchlist();
    };

    const toggleWatchlist = async () => {
        if (!id) {
            setError('Invalid game ID');
            return;
        }

        if (!selectedPlatform && getPlatformsWithPrices().size > 1) {
            setError('Please select a platform');
            return;
        }

        setIsLoading(true);
        setError(null);

        try {
            const endpoint = isInWatchlist
                ? `/api/watchlist/remove/${id}`
                : `/api/watchlist/add/${id}`;

            // Always send the full request body, even for remove
            const requestBody = {
                gameTitle: title,
                platform: selectedPlatform,
                currentPrice: getCurrentPrice(),
                genre: genre,
                getNotified: getNotified
            };

            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
                credentials: 'include',
            });

            if (!response.ok) {
                if (response.status === 401) {
                    handleUnauthorized();
                    return;
                }
                const data = await response.json();
                throw new Error(data.message || 'Failed to update watchlist');
            }

            setIsInWatchlist(!isInWatchlist);
            setError(null);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to update watchlist');
            console.error('Error updating watchlist:', err);
        } finally {
            setIsLoading(false);
        }
    };

    const toggleNotification = async () => {
        if (!id || !isInWatchlist || !isAuthenticated) return;

        setIsLoading(true);
        setError(null);

        try {
            const response = await fetch(`/api/watchlist/notify/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    getNotified: !getNotified,
                    platform: selectedPlatform
                }),
                credentials: 'include',
            });

            if (!response.ok) {
                if (response.status === 401) {
                    handleUnauthorized();
                    return;
                }
                const data = await response.json();
                throw new Error(data.message || 'Failed to update notification setting');
            }

            setGetNotified(!getNotified);
            setError(null);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Failed to update notification setting');
            console.error('Error updating notification setting:', err);
        } finally {
            setIsLoading(false);
        }
    };

    const platformPrices = getPlatformsWithPrices();

    return (
        <div className="watchlist-button-container">
            {isAuthenticated && platformPrices.size > 1 && !isInWatchlist && (
                <div className="platform-selector">
                    <select
                        value={selectedPlatform}
                        onChange={(e) => {
                            setSelectedPlatform(e.target.value);
                            setError(null);
                        }}
                        className="platform-select"
                        aria-label="Select Platform"
                    >
                        <option value="">Select Platform</option>
                        {Array.from(platformPrices.entries()).map(([platform, price]) => (
                            <option key={platform} value={platform}>
                                {platform} - ${price.toFixed(2)}
                            </option>
                        ))}
                    </select>
                </div>
            )}

            <button
                className={`watchlist-button ${isInWatchlist ? 'in-watchlist' : ''}`}
                onClick={handleWatchlistClick}
                disabled={
                    isLoading ||
                    !id ||
                    (!selectedPlatform && platformPrices.size > 1 && isAuthenticated)
                }
                aria-label={isInWatchlist ? 'Remove from Watchlist' : 'Add to Watchlist'}
            >
                {isLoading ? (
                    <span className="loading-spinner" aria-label="Loading"></span>
                ) : (
                    <>
                        <i className={`fas ${isInWatchlist ? 'fa-check' : 'fa-plus'}`} aria-hidden="true"></i>
                        {isAuthenticated
                            ? (isInWatchlist ? 'In Watchlist' : 'Add to Watchlist')
                            : 'Sign in to Add to Watchlist'}
                    </>
                )}
            </button>

            {isAuthenticated && isInWatchlist && (
                <div className="notification-toggle">
                    <label className="notification-label">
                        <input
                            type="checkbox"
                            checked={getNotified}
                            onChange={toggleNotification}
                            disabled={isLoading}
                            aria-label="Toggle Notifications"
                        />
                        <span className="notification-text">
                            {getNotified ? 'Notifications On' : 'Notifications Off'}
                        </span>
                    </label>
                </div>
            )}

            {error && (
                <div className="error-message" role="alert">
                    {error}
                </div>
            )}
        </div>
    );
}

export default WatchlistButton;


=======================================
FILE: EditProfile.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\pages\EditProfile.tsx
=======================================

import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "../styling/edit-profile.css";

function EditProfile() {
    const [userId, setUserId] = useState("");
    const [userName, setUserName] = useState("");
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");
    const navigate = useNavigate();

    useEffect(() => {
        const storedUser = localStorage.getItem("user") || sessionStorage.getItem("user");
        if (!storedUser) {
            navigate("/login"); // ð Redirect if not authenticated
            return;
        }

        const user = JSON.parse(storedUser);
        setUserId(user.id);
        setUserName(user.userName || "");
        setName(user.name || "");
        setEmail(user.email || "");
        setLoading(false);
    }, [navigate]);

    const handleUpdate = async () => {
        try {
            setError("");
            setSuccess("");

            const response = await fetch(`/api/auth/update-profile/${userId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json"
                },
                credentials: "include",
                body: JSON.stringify({ userName, name, email })
            });

            if (!response.ok) {
                const err = await response.json();
                throw new Error(err.message || "Update failed");
            }

            const data = await response.json();
            setSuccess(data.message);

            const updatedUser = { id: userId, userName, email, name };
            localStorage.setItem("user", JSON.stringify(updatedUser));
            sessionStorage.setItem("user", JSON.stringify(updatedUser));

            // â Redirect to main page after success
            navigate("/");

        } catch (err: any) {
            setError(err.message);
        }
    };


    const handleDeleteAccount = async () => {
        const confirmDelete = window.confirm("Are you sure you want to delete your account? This action cannot be undone.");
        if (!confirmDelete) return;

        try {
            const response = await fetch(`/api/auth/delete/${userId}`, {
                method: "DELETE",
                credentials: "include",
            });

            if (!response.ok) {
                const err = await response.json();
                throw new Error(err.message || "Account deletion failed");
            }

            // Clear storage
            localStorage.removeItem("user");
            sessionStorage.removeItem("user");

            alert("Your account has been deleted.");
            navigate("/"); // Redirect to homepage
        } catch (err: any) {
            setError(err.message);
        }
    };

    if (loading) return <p>Loading...</p>;

    return (
        <div className="edit-profile-container">
            <h2>Edit Profile</h2>

            <input
                type="text"
                placeholder="Username"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
            />
            <input
                type="text"
                placeholder="Full Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
            />
            <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
            />

            <button onClick={handleUpdate}>Save Changes</button>

            <button className="delete-btn" onClick={handleDeleteAccount}>
                Delete Account
            </button>

            {success && <p className="success">{success}</p>}
            {error && <p className="error">{error}</p>}
        </div>
    );
}

export default EditProfile;




=======================================
FILE: Login.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\pages\Login.tsx
=======================================


import LoginComponent from "../components/login";

function Login() {
    return (
        <div>
            <LoginComponent />
        </div>
    );
}

export default Login;




=======================================
FILE: Register.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\pages\Register.tsx
=======================================

import { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import "../styling/Register.css";

function Register() {
    const [name, setName] = useState("");
    const [userName, setUserName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");
    const [loading, setLoading] = useState(false);

    const navigate = useNavigate();

    const validatePassword = (password: string) => {
        const passwordRegex =
            /^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$/;
        return passwordRegex.test(password);
    };

    const handleAccount = async () => {
        setError("");
        setSuccess("");
        setLoading(true);

        if (!validatePassword(password)) {
            setError(
                "Password must contain at least one uppercase letter, a digit, and a special character"
            );
            setLoading(false);
            return;
        }

        try {
            const response = await fetch("/api/auth/register", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, userName, email, password }),
                credentials: "include",
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || "Account creation failed");
            }

            if (!data.user || !data.user.id) {
                throw new Error("Registration successful, but no user data returned.");
            }

            console.log("Account creation successful:", data);

            localStorage.setItem("user", JSON.stringify(data.user));
            setSuccess("Account created successfully! Redirecting...");

            setTimeout(() => navigate(`/`), 2000);
        } catch (error) {
            console.error("Error during account creation:", error);
            setError(error instanceof Error ? error.message : "Unexpected error");
        } finally {
            setLoading(false);
        }
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === "Enter") {
            handleAccount();
        }
    };

    return (
        <div className="register">
            <img src="../../public/logo.png" alt="Quest4Deals Logo" />
            <h1>Want to save games to view later?</h1>
            <h2>Create an account here</h2>
            <h3>Psst... it's free!</h3>

            {error && <p style={{ color: "red" }}>{error}</p>}
            {success && <p style={{ color: "green" }}>{success}</p>}
            {loading && <p>Creating account...</p>}

            <input
                type="text"
                placeholder="Full Name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                onKeyDown={handleKeyDown}
            />
            <input
                type="text"
                placeholder="Username"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                onKeyDown={handleKeyDown}
            />
            <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                onKeyDown={handleKeyDown}
            />
            <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                onKeyDown={handleKeyDown}
            />

            <button onClick={handleAccount} disabled={loading}>
                {loading ? "Creating Account..." : "Create Account"}
            </button>

            <Link to="/" className="home-link">
                Go to Home
            </Link>
        </div>
    );
}

export default Register;



=======================================
FILE: edit-profile.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\edit-profile.css
=======================================

/* src/styling/edit-profile.css */

.edit-profile-container {
    display: flex;
    color: white;
    background-color: var(--secondary-color);
    border-radius: 10px;
    padding: 5em;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    font-size: larger;
}

.edit-profile-container h2 {
    margin-bottom: 20px;
}

.edit-profile-container input {
    margin: 10px;
    padding: 10px;
    border-radius: 5px;
    width: 25%;
    border: none;
}

.edit-profile-container button {
    margin: 10px;
    padding: 10px;
    border-radius: 5px;
    width: 25%;
    border: 2px white solid;
    background-color: var(--secondary-color);
    color: white;
    font-size: larger;
}

.edit-profile-container button:hover {
    background-color: white;
    color: var(--secondary-color);
    cursor: pointer;
    transition: 0.3s;
}

.edit-profile-container .success {
    color: lightgreen;
    font-weight: bold;
    margin-top: 10px;
}

.edit-profile-container .error {
    color: #ff6b6b;
    font-weight: bold;
    margin-top: 10px;
}

.delete-btn {
    margin-top: 20px;
    padding: 10px;
    width: 25%;
    border: 2px solid #ff6b6b;
    background-color: transparent;
    color: #ff6b6b;
    font-size: larger;
    border-radius: 5px;
}

.delete-btn:hover {
    background-color: #ff6b6b;
    color: white;
    cursor: pointer;
    transition: 0.3s;
}




=======================================
FILE: GameDetails.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\GameDetails.css
=======================================

/* src/styling/GameDetails.css */
.game-details-container,
.modal-overlay {
    width: 100%;
    color: #ffffff;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    position: relative;
    width: 90%;
    max-width: 1200px;
    max-height: 90vh;
    overflow-y: auto;
    background-color: #1f2937;
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
}

.game-details-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 30px;
    background-color: #1f2937;
    border-radius: 12px;
    margin-top: 30px;
    margin-bottom: 30px;
}

.modal-close {
    position: absolute;
    top: 15px;
    right: 15px;
    width: 30px;
    height: 30px;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 50%;
    color: white;
    font-size: 16px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s;
}

    .modal-close:hover {
        background: rgba(255, 255, 255, 0.15);
    }

.details-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 20px;
    color: #ffffff;
}

.details-main {
    display: flex;
    gap: 30px;
    margin-bottom: 40px;
}

.details-image-container {
    flex: 0 0 300px;
}

.details-image {
    width: 100%;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
}

.details-info {
    flex: 1;
}

.details-description {
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: 20px;
    color: #e2e8f0;
}

.details-subtitle {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 12px;
    color: #ffffff;
}

.details-platforms {
    font-size: 1rem;
    color: #e2e8f0;
}

.details-platforms-container {
    margin-top: 20px;
}

.details-offers {
    margin-top: 30px;
}

.store-offers-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.store-offer {
    background-color: #2d3748;
    border-radius: 8px;
    padding: 15px;
    transition: transform 0.2s, box-shadow 0.2s;
}

    .store-offer:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

.store-info {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
}

.store-image {
    width: 32px;
    height: 32px;
    margin-right: 10px;
    border-radius: 4px;
}

.store-name {
    font-weight: 600;
    color: #cbd5e1;
}

.offer-details {
    margin-bottom: 15px;
}

.offer-edition {
    display: block;
    font-size: 0.9rem;
    color: #94a3b8;
    margin-bottom: 5px;
}

.offer-platform {
    display: inline-block;
    font-size: 0.8rem;
    background-color: #374151;
    color: #e2e8f0;
    padding: 2px 8px;
    border-radius: 4px;
    margin-bottom: 8px;
}

.offer-price {
    display: block;
    font-size: 1.2rem;
    font-weight: 700;
    color: #4ade80;
    margin-top: 8px;
}

.buy-button {
    display: inline-block;
    background-color: #3b82f6;
    color: white;
    font-weight: 600;
    padding: 8px 16px;
    border-radius: 6px;
    text-decoration: none;
    transition: background 0.2s;
    text-align: center;
}

    .buy-button:hover {
        background-color: #2563eb;
    }

.back-button {
    display: inline-block;
    background-color: #4b5563;
    color: white;
    font-weight: 500;
    padding: 8px 16px;
    border-radius: 6px;
    margin-top: 30px;
    cursor: pointer;
    border: none;
    transition: background 0.2s;
}

    .back-button:hover {
        background-color: #374151;
    }

.no-offers {
    background-color: #2d3748;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
    color: #94a3b8;
}

/* Price History Section */
.price-history-section {
    margin-top: 40px;
}

.price-history-content {
    background-color: #2d3748;
    border-radius: 8px;
    padding: 20px;
}

.price-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
    margin-bottom: 25px;
}

.stat-item {
    background-color: #374151;
    border-radius: 6px;
    padding: 12px;
    text-align: center;
}

.stat-label {
    display: block;
    font-size: 0.9rem;
    color: #94a3b8;
    margin-bottom: 5px;
}

.stat-value {
    display: block;
    font-size: 1.3rem;
    font-weight: 700;
    color: #4ade80;
}

.new-price-tracking {
    text-align: center;
    padding: 25px 0;
    line-height: 1.6;
    color: #e2e8f0;
    font-size: 1.1rem;
}

    .new-price-tracking p {
        margin: 10px 0;
    }

    .new-price-tracking strong {
        color: #4ade80;
        font-weight: 700;
    }

.no-price-history {
    background-color: #2d3748;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
    color: #94a3b8;
}

.game-details.loading,
.game-details.error,
.game-details.not-found {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 400px;
    text-align: center;
    font-size: 1.1rem;
    color: #94a3b8;
    background-color: #1f2937;
    border-radius: 8px;
    margin: 50px auto;
    max-width: 800px;
}

@media screen and (max-width: 768px) {
    .details-main {
        flex-direction: column;
    }

    .details-image-container {
        flex: 0 0 auto;
    }

    .store-offers-grid {
        grid-template-columns: 1fr;
    }

    .modal-content {
        width: 95%;
        padding: 20px;
    }

    .price-stats {
        grid-template-columns: 1fr 1fr;
    }

    .watchlist-section {
        margin-top: 30px;
        text-align: center;
    }
    
    @media screen and (max-width: 768px) {
        .watchlist-section {
            margin-top: 20px;
            margin-bottom: 20px;
        }
    }

    .watchlist-button {
        padding: 10px 20px;
        font-weight: 600;
        background-color: #10b981;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

    .watchlist-button:disabled {
        background-color: #6b7280;
        cursor: not-allowed;
    }

}



=======================================
FILE: Login.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\Login.css
=======================================

ï»¿@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap");

* {
  font-family: "Poppins", sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Login page background */
.login-page {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

/* Dark overlay */
.login-page::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: var(--secondary-color);
}

/* Login form container */
.login-container {
  position: relative;
  padding: 40px;
  width: 350px;
  display: flex;
  flex-direction: column;
  border-radius: 8px;
  color: white;
  z-index: 2;
  text-align: center;
}

/* Login title */
.login-container h2 {
  font-size: 24px;
  font-weight: 700; /* â Bolder title */
  margin-bottom: 20px;
}

/* Input fields */
.login-container input {
  width: 100%;
  padding: 12px;
  margin: 10px 0;
  border-radius: 5px;
  border: none;
  background: white;
  font-size: 16px;
}

.login-container img {
  width: 300px;
  height: auto;
  border-radius: 10px;
}

/* Sign In button */
.login-container button {
  width: 100%;
  padding: 12px;
  background: var(--secondary-color);
  border: none;
  color: white;
  font-size: 18px;
  font-weight: bold;
  cursor: pointer;
  margin-top: 20px;
  border-radius: 5px;
  transition: background 0.3s ease-in-out;
  border: 2px solid white;
}

.login-container button:hover {
  background: white;
  color: var(--secondary-color);
}

/* Remember me & Help link */
.login-options {
  display: flex;
  justify-content: space-between;
  font-size: 14px;
  margin-top: 15px;
  font-weight: 400;
}

.remember-me {
  display: flex;
  align-items: center;
}

.remember-me input {
  margin-right: 5px;
}

.help-link {
  color: white;
  text-decoration: none;
  font-weight: 400;
}

.help-link:hover {
  text-decoration: underline;
}

/* Sign up text */
.signup-text {
  margin-top: 20px;
  font-size: 14px;
  font-weight: 400;
}

.signup-text a {
  color: var(--highlight-color);
  font-weight: 600;
  text-decoration: none;
}

.signup-text a:hover {
  text-decoration: underline;
}



=======================================
FILE: Main.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\Main.css
=======================================

/* This makes these colors accessible across the entire project, so we can define a color theme here and use them in styling components */
:root {
  --primary-color: rgba(48, 48, 48, 0.4); /* lighter black with transparency */
  --secondary-color: #4472ca;
  --highlight-color: #f79256;
}

html,
body {
  background-color: #0a0a0a; /* rich black */
  font-family: Impact, Haettenschweiler, "Arial Narrow Bold", sans-serif;
  margin: 0;
  padding: 0;
}

.main-content {
  backdrop-filter: blur(15px);
  -webkit-backdrop-filter: blur(15px);
  background-color: var(--primary-color); /* semi-transparent glassy black */
  border-radius: 12px;
  padding: 20px;
  margin: 10px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.App {
  display: grid;
  grid-template-columns: 200px 1fr 1fr 1fr;
  grid-template-rows: 50px 1fr 1fr 1fr;

  background-color: var(--primary-color); /* lighter black glass */
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.25);
  padding: 10px;
  margin: 10px;
  border: 1px solid rgba(255, 255, 255, 0.08);
}

.navbar {
  position: sticky;
  top: 0;
  z-index: 1000;
  grid-row: 1;
  grid-column: 1 / -1;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  background-color: var(--secondary-color);
  font-size: 1.5em;
  border-radius: 10px;
  margin: 5px;
}

.navbar a {
  color: white;
  text-decoration: none;
}

.navbar a:hover {
  text-decoration: underline;
}

.navbar input {
  width: 400px;
  height: 30px;
  border-radius: 5px;
  border: 1px solid black;
}

.navbar img {
  width: 150px;
  height: auto;
  border-radius: 10px;
}

/* â UPDATED FILTER SECTION BELOW */
.filter {
  position: sticky;
  top: 60px;
  align-self: start;
  z-index: 100;
  grid-column: 1;
  grid-row: 2 / -1;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--secondary-color);
  color: var(--highlight-color);
  font-size: 1.5em;
  border-radius: 10px;
  padding: 20px;
  box-sizing: border-box;
}

.filter select,
.filter button,
.navbar button {
  background-color: var(--secondary-color);
  color: white;
  border: 2px solid white;
  border-radius: 5px;
  width: 150px;
  height: 30px;
  margin: 10px;
  font-size: 1rem;
  font-family: inherit;
}

.filter button:hover,
.navbar button:hover {
  background-color: var(--highlight-color);
  color: white;
  transition: 0.1s;
  cursor: pointer;
}

.filter button:active {
  background-color: var(--primary-color);
}
/* â END FILTER SECTION */

.dashboard {
  grid-column: 2 / -1;
  grid-row: 2 / -1;
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  padding: 10px;
  justify-content: flex-start;
}

.gamecard {
  border: 1px solid black;
  width: 300px;
  margin: 2px;
  justify-content: space-around;
  background-color: var(--secondary-color);
  color: white;
  border-radius: 10px;
  padding: 5px;
}

.gamecard img {
  width: 100%;
  height: 50%;
  border-radius: 10px;
  object-fit: cover;
}

.gamecard h2 {
  font-size: 1.5em;
  margin: 0;
}

.game-info p,
.game-info .age-rating {
  margin-top: 10px;
  margin-bottom: 10px;
}

.lowest-price {
  font-weight: bold;
}



=======================================
FILE: Navbar.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\Navbar.css
=======================================

/* â User menu container */
.user-menu {
  position: relative;
  display: inline-block;
}

/* â User button styling */
.user-btn {
  background: none;
  color: white;
  border: none;
  font-size: 16px;
  cursor: pointer;
  padding: 10px;
}

/* â Dropdown menu container */
.dropdown-menu {
  position: absolute;
  top: 100%;
  right: 0;
  background: var(--secondary-color);
  border-radius: 5px;
  width: 180px;
  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  padding: 10px 0;
  z-index: 100;
  border: 2px solid white;
  color: white;
}

/* â Dropdown menu items */
.dropdown-item {
  padding: 12px;
  text-decoration: none;
  text-align: left;
  display: block;
  transition: 0.2s;
}

/* â Hover effect */
.dropdown-item:hover {
  background: white;
  color: var(--secondary-color);
}

/* â Logout button */
.logout-btn {
  border: none;
  background: none;
  color: white;
  font-size: 16px;
  width: 100%;
  text-align: left;
  cursor: pointer;
}



=======================================
FILE: Register.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\Register.css
=======================================

.register {
  display: flex;
  color: white;
  background-color: var(--secondary-color);
  border-radius: 10px;
  padding: 10px;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 5em;
  font-size: larger;
}

.register input {
  margin: 10px;
  padding: 10px;
  border-radius: 5px;
  width: 25%;
}

.register img {
  width: 300px;
  height: auto;
  border-radius: 10px;
}

.register button {
  margin: 10px;
  padding: 10px;
  border-radius: 5px;
  width: 25%;
  border: 2px white solid;
  background-color: var(--secondary-color);
  color: white;
  font-size: larger;
}

.register button:hover {
  background-color: white;
  color: var(--secondary-color);
  cursor: pointer;
  transition: 0.3s;
}

.home-link {
  color: var(--highlight-color);
  text-decoration: none;
  font-size: larger;
}

.home-link:hover {
  color: var(--highlight-color);
  text-decoration: underline;
}



=======================================
FILE: WatchlistButton.css
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\styling\WatchlistButton.css
=======================================

ï»¿/* src/styling/WatchlistButton.css */
.watchlist-button-container {
    display: inline-block;
}

.watchlist-button {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid #ccc;
    background-color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
}

.watchlist-button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
}

.watchlist-button.in-watchlist {
    background-color: #ffd700;
    border-color: #ffd700;
}

.watchlist-button:hover:not(:disabled) {
    background-color: #f0f0f0;
}

.watchlist-button.in-watchlist:hover:not(:disabled) {
    background-color: #ffed4a;
}

.watchlist-error {
    color: red;
    font-size: 0.8rem;
    margin-top: 0.25rem;
}

.loading-spinner {
    display: inline-block;
    animation: spin 1s infinite linear;
}

@keyframes spin {
    0% { content: "." }
    33% { content: ".." }
    66% { content: "..." }
}


=======================================
FILE: amplifyconfiguration.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\amplifyconfiguration.json
=======================================

{
  "aws_project_region": "us-west-2",
  "aws_cognito_identity_pool_id": "us-west-2:9d87bc4f-f48b-4e50-8712-b7f12f1e15a7",
  "aws_cognito_region": "us-west-2",
  "aws_user_pools_id": "us-west-2_zt9KVXZiS",
  "aws_user_pools_web_client_id": "4f7sc7n5bgdi69oigbdu810bm1",
  "oauth": {},
  "aws_cognito_username_attributes": [
    "EMAIL"
  ],
  "aws_cognito_social_providers": [],
  "aws_cognito_signup_attributes": [
    "EMAIL"
  ],
  "aws_cognito_mfa_configuration": "OFF",
  "aws_cognito_mfa_types": [
    "SMS"
  ],
  "aws_cognito_password_protection_settings": {
    "passwordPolicyMinLength": 8,
    "passwordPolicyCharacters": []
  },
  "aws_cognito_verification_mechanisms": [
    "EMAIL"
  ]
}


=======================================
FILE: App.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\App.tsx
=======================================

// src/App.tsx
import {
  BrowserRouter as Router,
  Routes,
  Route,
  useLocation,
} from "react-router-dom";

import Navbar from "./components/Navbar";
import Filter from "./components/Filter";
import Dashboard from "./components/Dashboard";
import Login from "./pages/Login";
import Register from "./pages/Register";
import EditProfilePage from "./pages/EditProfile";
import GameDetails from "./components/GameDetails";
import "./styling/Main.css";
import { useState } from "react";

function AppRoutes() {
  const location = useLocation();
  const state = location.state as { backgroundLocation?: Location };

  // State for filters to be applied to games
  const [filters, setFilters] = useState({
    platform: "all",
    genre: "Genre",
    price: "PriceOrder",
  });
  // State for if the filters are applied to display the games or not
  const [isFiltered, setIsFiltered] = useState(false);
  // State for reload key
  const [reloadKey, setReloadKey] = useState(0);
  // state for the search input and whether the user is searching or not
  const [searchQuery, setSearchQuery] = useState("");
  const [isSearching, setIsSearching] = useState(false);

  const handleReloadDashboard = () => {
    setReloadKey((prev) => prev + 1);
  };

  return (
    <>
      {/* Background content */}
      <Routes location={state?.backgroundLocation || location}>
        <Route
          path="/"
          element={
            <div className="App">
              <Navbar
                setSearchQuery={setSearchQuery}
                setIsSearching={setIsSearching}
                onReload={handleReloadDashboard}
              />
              <Filter
                filters={filters}
                setFilters={setFilters}
                setIsFiltered={setIsFiltered}
                onReload={handleReloadDashboard}
              />
              <Dashboard
                isFiltered={isFiltered}
                filters={filters}
                key={reloadKey}
                isSearching={isSearching}
                searchQuery={searchQuery}
              />
            </div>
          }
        />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        <Route path="/edit-profile/:userId" element={<EditProfilePage />} />
        {/* fallback if user visits details directly */}
        <Route
          path="/details/:id/:title"
          element={<GameDetails isModal={false} />}
        />
      </Routes>

      {/* Modal route on top of background */}
      {state?.backgroundLocation && (
        <Routes>
          <Route path="/details/:id/:title" element={<GameDetails isModal />} />
        </Routes>
      )}
    </>
  );
}

export default function App() {
  return (
    <Router>
      <AppRoutes /> {/* â Hook now called inside Router */}
    </Router>
  );
}



=======================================
FILE: aws-exports.js
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\aws-exports.js
=======================================

/* eslint-disable */
// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const awsmobile = {
    "aws_project_region": "us-west-2",
    "aws_cognito_identity_pool_id": "us-west-2:9d87bc4f-f48b-4e50-8712-b7f12f1e15a7",
    "aws_cognito_region": "us-west-2",
    "aws_user_pools_id": "us-west-2_zt9KVXZiS",
    "aws_user_pools_web_client_id": "4f7sc7n5bgdi69oigbdu810bm1",
    "oauth": {},
    "aws_cognito_username_attributes": [
        "EMAIL"
    ],
    "aws_cognito_social_providers": [],
    "aws_cognito_signup_attributes": [
        "EMAIL"
    ],
    "aws_cognito_mfa_configuration": "OFF",
    "aws_cognito_mfa_types": [
        "SMS"
    ],
    "aws_cognito_password_protection_settings": {
        "passwordPolicyMinLength": 8,
        "passwordPolicyCharacters": []
    },
    "aws_cognito_verification_mechanisms": [
        "EMAIL"
    ]
};


export default awsmobile;



=======================================
FILE: main.tsx
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\main.tsx
=======================================

import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.tsx";

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <App />
  </StrictMode>
);



=======================================
FILE: vite-env.d.ts
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\src\vite-env.d.ts
=======================================

/// <reference types="vite/client" />



=======================================
FILE: eslint.config.js
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\eslint.config.js
=======================================

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)



=======================================
FILE: index.html
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\index.html
=======================================

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Quest4Deals</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



=======================================
FILE: package.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\package.json
=======================================

{
  "name": "quest4dealsweb.client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@aws-amplify/ui-react": "^6.9.3",
    "aws-amplify": "^6.13.3",
    "chart.js": "^4.4.9",
    "oidc-client-ts": "^3.1.0",
    "react": "^19.0.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.0.0",
    "react-oidc-context": "^3.2.0",
    "react-router-dom": "^7.2.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.19.0",
    "@types/node": "^22",
    "@types/react": "^19.0.8",
    "@types/react-dom": "^19.0.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.19.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.18",
    "globals": "^15.14.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.22.0",
    "vite": "^6.1.0"
  }
}



=======================================
FILE: quest4dealsweb.client.esproj
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\quest4dealsweb.client.esproj
=======================================

<Project Sdk="Microsoft.VisualStudio.JavaScript.Sdk/1.0.2431246">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <StartupCommand>npm run dev</StartupCommand>
    <JavaScriptTestRoot>src\</JavaScriptTestRoot>
    <JavaScriptTestFramework>Vitest</JavaScriptTestFramework>
    <!-- Allows the build (or compile) script located on package.json to run on Build -->
    <ShouldRunBuildScript>false</ShouldRunBuildScript>
    <!-- Folder where production build objects will be placed -->
    <BuildOutputFolder>$(MSBuildProjectDirectory)\dist</BuildOutputFolder>
  </PropertyGroup>
</Project>


=======================================
FILE: tsconfig.app.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\tsconfig.app.json
=======================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}



=======================================
FILE: tsconfig.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\tsconfig.json
=======================================

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



=======================================
FILE: tsconfig.node.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\tsconfig.node.json
=======================================

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



=======================================
FILE: vite.config.ts
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.client\vite.config.ts
=======================================

import { fileURLToPath, URL } from 'node:url';
import { defineConfig } from 'vite';
import plugin from '@vitejs/plugin-react';
import fs from 'fs';
import path from 'path';
import child_process from 'child_process';
import { env } from 'process';

const baseFolder =
    env.APPDATA !== undefined && env.APPDATA !== ''
        ? `${env.APPDATA}/ASP.NET/https`
        : `${env.HOME}/.aspnet/https`;

const certificateName = "quest4dealsweb.client";
const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
const keyFilePath = path.join(baseFolder, `${certificateName}.key`);

if (!fs.existsSync(baseFolder)) {
    fs.mkdirSync(baseFolder, { recursive: true });
}

if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
    if (0 !== child_process.spawnSync('dotnet', [
        'dev-certs',
        'https',
        '--export-path',
        certFilePath,
        '--format',
        'Pem',
        '--no-password',
    ], { stdio: 'inherit' }).status) {
        throw new Error("Could not create certificate.");
    }
}

// â Ensure API calls correctly proxy to ASP.NET Core backend
const target = env.ASPNETCORE_HTTPS_PORT
    ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}`
    : env.ASPNETCORE_URLS
        ? env.ASPNETCORE_URLS.split(';')[0]
        : 'https://localhost:7233';

export default defineConfig({
    plugins: [plugin()],
    resolve: {
        alias: {
            '@': fileURLToPath(new URL('./src', import.meta.url))
        }
    },
    server: {
        proxy: {
            "^/api/": {
                target: target,
                changeOrigin: true,
                secure: false, // â Allow self-signed HTTPS
                ws: true, // â Enable WebSockets if needed
                rewrite: (path) => path.replace(/^\/api/, "/api"), // â Keep "/api" prefix
            }
        },
        port: parseInt(env.DEV_SERVER_PORT || '51540'),
        https: {
            key: fs.readFileSync(keyFilePath),
            cert: fs.readFileSync(certFilePath),
        }
    }
});



=======================================
FILE: API_Caller.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\API_Requestor\API_Caller.cs
=======================================

namespace API_Requestor
{
    using System.Net.Http;
    using System.Threading.Tasks;

    public static class ApiCaller
    {
        public static async Task<string> CallApiAsync(string url)
        {
            using var client = new HttpClient();
            var response = await client.GetAsync(url);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }
    }

}


=======================================
FILE: API_Request.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\API_Requestor\API_Request.cs
=======================================

namespace API_Requestor
{

    using System;
    using System.Collections.Generic;
    using System.Linq;

    public class APIRequest
    {
        private readonly string _baseUrl;
        private readonly Dictionary<string, string> _parameters;

        public APIRequest(string baseUrl)
        {
            _baseUrl = baseUrl ?? throw new ArgumentNullException(nameof(baseUrl));
            _parameters = new Dictionary<string, string>();
        }

        public void AddRequestParameter(string key, string value)
        {
            if (string.IsNullOrEmpty(key))
                throw new ArgumentException("Parameter key cannot be null or empty.", nameof(key));
            if (value == null)
                throw new ArgumentNullException(nameof(value), "Parameter value cannot be null.");

            _parameters[key] = value;
        }

        public string BuildUrl()
        {
            if (_parameters.Count == 0)
                return _baseUrl;

            var queryString = string.Join("&", _parameters.Select(p => $"{p.Key}={Uri.EscapeDataString(p.Value)}"));
            return $"{_baseUrl}?{queryString}";
        }
    }
}


=======================================
FILE: Example.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\API_Requestor\Example.cs
=======================================

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using API_Requestor;

public class Example
{
    public static async Task Main()
    {
        // Use the Steam Store API endpoint for app details.
        var request = new APIRequest("https://store.steampowered.com/api/appdetails");
        request.AddRequestParameter("appids", "993090");
        request.AddRequestParameter("cc", "us");

        string url = request.BuildUrl();
        Console.WriteLine($"Request URL: {url}");

        try
        {
            // Call the API and parse the JSON response.
            string jsonResponse = await ApiCaller.CallApiAsync(url);
            var parsedJson = JObject.Parse(jsonResponse);
            string formattedJson = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);

            Console.WriteLine("API Response:");
            Console.WriteLine(formattedJson);

            // Extract the name, price, and discount information.
            var data = parsedJson["993090"]?["data"];
            var name = data?["name"];
            var price = data?["price_overview"]?["final_formatted"];
            var percentDiscount = data?["price_overview"]?["discount_percent"];

            if (name != null && price != null && percentDiscount != null)
            {
                Console.WriteLine($"\n\nRAW Price Info: {data?["price_overview"]}");
                Console.WriteLine("\nSteam API Price Info:");
                Console.WriteLine($"Name: {name}");
                Console.WriteLine($"Price: {price}");
                Console.WriteLine($"Discount Percent: {percentDiscount}%");
            }
            else
            {
                Console.WriteLine("Price information is not available.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}


=======================================
FILE: GameController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\GameController.cs
=======================================

using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;

namespace quest4dealsweb.Server.Controllers;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;

[ApiController]
[Route("api/games")]
public class GameController : ControllerBase
{
    private readonly DataContext _context;

    public GameController(DataContext context)
    {
        _context = context;
    }

    [HttpGet]
    public async Task<ActionResult<IEnumerable<Game>>> GetAllGames()
    {
        return await _context.Games.ToListAsync();
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<Game>> GetGame(int id)
    {
        var game = await _context.Games.FindAsync(id);
        if (game == null)
        {
            return NotFound("Game not found.");
        }

        var latestPriceHistory = await _context.GamePriceHistories
            .Where(ph => ph.GameId == id)
            .OrderByDescending(ph => ph.RecordedAt)
            .FirstOrDefaultAsync();

        if (latestPriceHistory != null && game.Price != latestPriceHistory.Price)
        {
            game.Price = latestPriceHistory.Price;
            _context.Entry(game).State = EntityState.Modified;
            await _context.SaveChangesAsync();
        }

        // Return a custom object without UserId
        return Ok(new
        {
            Id = game.Id,
            Title = game.Title,
            Genre = game.Genre,
            Platform = game.Platform,
            Price = game.Price
        });
    }

    [HttpGet("user/{userId}")]
    public async Task<ActionResult<IEnumerable<object>>> GetUserGamesPriceHistory(string userId)
    {
        // Get all games for this user
        var userGames = await _context.Games
            .Where(g => g.UserId == userId)
            .ToListAsync();

        if (userGames == null || !userGames.Any())
        {
            return NotFound("No games found for this user.");
        }

        // Get all price histories for these games
        var gameIds = userGames.Select(g => g.Id).ToList();
        var priceHistories = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .OrderByDescending(ph => ph.RecordedAt)
            .ToListAsync();

        // Group games by Title, Genre, and Platform, and use the first GameId as the representative
        var result = userGames
            .GroupBy(g => new { g.Title, g.Genre, g.Platform })
            .Select(group => new
            {
                Game = new
                {
                    Id = group.OrderBy(g => g.Id).First().Id, // Use the earliest GameId (e.g., 9 for DESTINY 9)
                    Title = group.Key.Title,
                    Genre = group.Key.Genre,
                    Platform = group.Key.Platform,
                    Price = group.OrderByDescending(g => g.Id).First().Price // Use the latest Price
                },
                PriceHistory = priceHistories
                    .Where(ph => group.Select(g => g.Id).Contains(ph.GameId))
                    .OrderByDescending(ph => ph.RecordedAt)
                    .Select(ph => new
                    {
                        Id = ph.Id,
                        GameId = group.OrderBy(g => g.Id).First().Id, // Rewrite GameId to match the chosen GameId
                        Price = ph.Price,
                        RecordedAt = ph.RecordedAt
                    })
                    .ToList()
            });

        return Ok(result);
    }

    [HttpPost]
    public async Task<ActionResult<Game>> CreateGame(Game game)
    {
        // Check if the User exists before adding the game
        var userExists = await _context.Users.AnyAsync(u => u.Id == game.UserId);
        if (!userExists)
        {
            return BadRequest("User not found.");
        }

        // Add the game
        _context.Games.Add(game);
        await _context.SaveChangesAsync();

        // Record initial price history
        var priceHistory = new GamePriceHistory
        {
            GameId = game.Id,
            Price = game.Price,
            RecordedAt = DateTime.UtcNow
        };

        _context.GamePriceHistories.Add(priceHistory);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetGame), new { id = game.Id }, game);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> UpdateGame(int id, Game game)
    {
        if (id != game.Id)
        {
            return BadRequest("Game ID mismatch.");
        }

        // Get the existing game to check if price changed
        var existingGame = await _context.Games.FindAsync(id);
        if (existingGame == null)
        {
            return NotFound("Game not found.");
        }

        bool priceChanged = existingGame.Price != game.Price;

        // Update the game
        _context.Entry(existingGame).State = EntityState.Detached;
        _context.Entry(game).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();

            // If price changed, record a new price history entry
            if (priceChanged)
            {
                var priceHistory = new GamePriceHistory
                {
                    GameId = game.Id,
                    Price = game.Price,
                    RecordedAt = DateTime.UtcNow
                };

                _context.GamePriceHistories.Add(priceHistory);
                await _context.SaveChangesAsync();
            }
        }
        catch (DbUpdateConcurrencyException)
        {
            bool exists = _context.Games.Any(e => e.Id == id);
            if (!exists)
            {
                return NotFound("Game not found.");
            }
            throw;
        }

        return NoContent();
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteGame(int id)
    {
        var game = await _context.Games.FindAsync(id);
        if (game == null)
        {
            return NotFound("Game not found.");
        }

        _context.Games.Remove(game);
        await _context.SaveChangesAsync();

        // Note: Price history will be automatically deleted due to cascade delete

        return NoContent();
    }
}


=======================================
FILE: GamePriceHistoryController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\GamePriceHistoryController.cs
=======================================

/*using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace quest4dealsweb.Server.Controllers;

[ApiController]
[Route("api/price-history")]
public class GamePriceHistoryController : ControllerBase
{
    private readonly DataContext _context;

    public GamePriceHistoryController(DataContext context)
    {
        _context = context;
    }

    // GET: api/price-history/game/{gameId}
    [HttpGet("game/{gameId}")]
    public async Task<ActionResult<IEnumerable<GamePriceHistory>>> GetGamePriceHistory(int gameId)
    {
        var game = await _context.Games.FindAsync(gameId);
        if (game == null)
        {
            return NotFound("Game not found.");
        }

        var priceHistory = await _context.GamePriceHistories
            .Where(ph => ph.GameId == gameId) // Simplified to single GameId
            .OrderByDescending(ph => ph.RecordedAt)
            .ToListAsync();

        if (priceHistory == null || !priceHistory.Any())
        {
            return NotFound("No price history found for this game.");
        }

        return Ok(priceHistory);
    }

    // GET: api/price-history/user/{userId}
    [HttpGet("user/{userId}")]
    public async Task<ActionResult<IEnumerable<object>>> GetUserGamesPriceHistory(string userId)
    {
        var userGames = await _context.Games
            .Where(g => g.UserId == userId)
            .ToListAsync();

        if (userGames == null || !userGames.Any())
        {
            return NotFound("No games found for this user.");
        }

        var gameIds = userGames.Select(g => g.Id).ToList();
        var priceHistories = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .OrderByDescending(ph => ph.RecordedAt)
            .ToListAsync();

        var result = userGames
            .GroupBy(g => new { g.Title, g.Genre, g.Platform })
            .Select(group =>
            {
                var groupGameIds = group.Select(g => g.Id).ToList();
                var latestPrice = priceHistories
                    .Where(ph => groupGameIds.Contains(ph.GameId))
                    .OrderByDescending(ph => ph.RecordedAt)
                    .FirstOrDefault()?.Price ?? group.First().Price;

                return new
                {
                    Game = new
                    {
                        Id = group.OrderBy(g => g.Id).First().Id,
                        Title = group.Key.Title,
                        Genre = group.Key.Genre,
                        Platform = group.Key.Platform,
                        Price = latestPrice,
                        UserId = group.First().UserId
                    },
                    PriceHistory = priceHistories
                        .Where(ph => groupGameIds.Contains(ph.GameId))
                        .OrderByDescending(ph => ph.RecordedAt)
                        .Select(ph => new
                        {
                            Id = ph.Id,
                            GameId = group.OrderBy(g => g.Id).First().Id,
                            Price = ph.Price,
                            RecordedAt = ph.RecordedAt
                        })
                        .ToList()
                };
            });

        return Ok(result);
    }

    // POST: api/price-history
    [HttpPost]
    public async Task<ActionResult<GamePriceHistory>> RecordPriceChange([FromBody] GamePriceHistoryDto priceHistoryDto)
    {
        var game = await _context.Games.FindAsync(priceHistoryDto.GameId);
        if (game == null)
        {
            return BadRequest("Game not found.");
        }

        var priceHistory = new GamePriceHistory
        {
            GameId = priceHistoryDto.GameId,
            Price = priceHistoryDto.Price,
            RecordedAt = DateTime.UtcNow
        };

        _context.GamePriceHistories.Add(priceHistory);
        game.Price = priceHistoryDto.Price;
        _context.Entry(game).State = EntityState.Modified;

        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetGamePriceHistory), new { gameId = priceHistory.GameId }, priceHistory);
    }

    // GET: api/price-history/latest/{gameId}
    [HttpGet("latest/{gameId}")]
    public async Task<ActionResult<GamePriceHistory>> GetLatestPrice(int gameId)
    {
        var latestPrice = await _context.GamePriceHistories
            .Where(ph => ph.GameId == gameId)
            .OrderByDescending(ph => ph.RecordedAt)
            .FirstOrDefaultAsync();

        if (latestPrice == null)
        {
            return NotFound("No price history found for this game.");
        }

        return Ok(latestPrice);
    }

    // GET: api/price-history/stats/{gameId}
    [HttpGet("stats/{gameId}")]
    public async Task<ActionResult<object>> GetPriceStats(int gameId)
    {
        var priceHistory = await _context.GamePriceHistories
            .Where(ph => ph.GameId == gameId)
            .OrderBy(ph => ph.RecordedAt)
            .ToListAsync();

        if (priceHistory == null || !priceHistory.Any())
        {
            return NotFound("No price history found for this game.");
        }

        var stats = new
        {
            GameId = gameId,
            InitialPrice = priceHistory.First().Price,
            CurrentPrice = priceHistory.Last().Price,
            LowestPrice = priceHistory.Min(ph => ph.Price),
            HighestPrice = priceHistory.Max(ph => ph.Price),
            AveragePrice = priceHistory.Average(ph => ph.Price),
            PriceChanges = priceHistory.Count(),
            PriceHistory = priceHistory
        };

        return Ok(stats);
    }
}*/



=======================================
FILE: GamePriceTrendsController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\GamePriceTrendsController.cs
=======================================

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace quest4dealsweb.Server.Controllers;

[ApiController]
[Route("api/trends")]
public class GamePriceTrendsController : ControllerBase
{
    private readonly DataContext _context;

    public GamePriceTrendsController(DataContext context)
    {
        _context = context;
    }

    // GET: api/trends/game/{gameId}
    [HttpGet("game/{gameId}")]
    public async Task<ActionResult<GamePriceTrendDto>> GetGamePriceTrend(int gameId)
    {
        var game = await _context.Games.FindAsync(gameId);
        if (game == null)
        {
            return NotFound("Game not found.");
        }

        var priceHistory = await _context.GamePriceHistories
            .Where(ph => ph.GameId == gameId)
            .OrderBy(ph => ph.RecordedAt)
            .ToListAsync();

        if (!priceHistory.Any())
        {
            return NotFound("No price history found for this game.");
        }

        var initialPrice = priceHistory.First().Price;
        var currentPrice = priceHistory.Last().Price;
        var priceChangePercentage = initialPrice > 0
            ? Math.Round(((currentPrice - initialPrice) / initialPrice) * 100, 2)
            : 0;

        var trend = new GamePriceTrendDto
        {
            GameId = game.Id,
            Title = game.Title,
            Genre = game.Genre,
            Platform = game.Platform,
            CurrentPrice = currentPrice,
            InitialPrice = initialPrice,
            LowestPrice = priceHistory.Min(ph => ph.Price),
            HighestPrice = priceHistory.Max(ph => ph.Price),
            PriceChangePercentage = priceChangePercentage,
            LastUpdated = priceHistory.Last().RecordedAt,
            TotalPriceChanges = priceHistory.Count,
            PricePoints = priceHistory.Select(ph => new PricePoint
            {
                Date = ph.RecordedAt,
                Price = ph.Price
            }).ToList()
        };

        return Ok(trend);
    }

    // GET: api/trends/user/{userId}
    [HttpGet("user/{userId}")]
    public async Task<ActionResult<IEnumerable<GamePriceTrendDto>>> GetUserGamePriceTrends(string userId)
    {
        var userGames = await _context.Games
            .Where(g => g.UserId == userId)
            .ToListAsync();

        if (!userGames.Any())
        {
            return NotFound("No games found for this user.");
        }

        var gameIds = userGames.Select(g => g.Id).ToList();

        var allPriceHistories = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .ToListAsync();

        var trends = new List<GamePriceTrendDto>();

        foreach (var game in userGames)
        {
            var gameHistory = allPriceHistories
                .Where(ph => ph.GameId == game.Id)
                .OrderBy(ph => ph.RecordedAt)
                .ToList();

            if (!gameHistory.Any())
                continue;

            var initialPrice = gameHistory.First().Price;
            var currentPrice = gameHistory.Last().Price;
            var priceChangePercentage = initialPrice > 0
                ? Math.Round(((currentPrice - initialPrice) / initialPrice) * 100, 2)
                : 0;

            trends.Add(new GamePriceTrendDto
            {
                GameId = game.Id,
                Title = game.Title,
                Genre = game.Genre,
                Platform = game.Platform,
                CurrentPrice = currentPrice,
                InitialPrice = initialPrice,
                LowestPrice = gameHistory.Min(ph => ph.Price),
                HighestPrice = gameHistory.Max(ph => ph.Price),
                PriceChangePercentage = priceChangePercentage,
                LastUpdated = gameHistory.Last().RecordedAt,
                TotalPriceChanges = gameHistory.Count,
                PricePoints = gameHistory.Select(ph => new PricePoint
                {
                    Date = ph.RecordedAt,
                    Price = ph.Price
                }).ToList()
            });
        }

        return Ok(trends);
    }

    // GET: api/trends/platform/{platform}
    [HttpGet("platform/{platform}")]
    public async Task<ActionResult<object>> GetPlatformPriceTrends(string platform)
    {
        var platformGames = await _context.Games
            .Where(g => g.Platform.ToLower() == platform.ToLower())
            .ToListAsync();

        if (!platformGames.Any())
        {
            return NotFound($"No games found for platform: {platform}");
        }

        var gameIds = platformGames.Select(g => g.Id).ToList();

        // Get the first and last price for each game
        var firstPrices = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .GroupBy(ph => ph.GameId)
            .Select(g => new
            {
                GameId = g.Key,
                FirstPrice = g.OrderBy(ph => ph.RecordedAt).First().Price
            })
            .ToListAsync();

        var lastPrices = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .GroupBy(ph => ph.GameId)
            .Select(g => new
            {
                GameId = g.Key,
                LastPrice = g.OrderByDescending(ph => ph.RecordedAt).First().Price
            })
            .ToListAsync();

        // Calculate platform averages
        var averageInitialPrice = firstPrices.Average(g => g.FirstPrice);
        var averageCurrentPrice = lastPrices.Average(g => g.LastPrice);
        var averagePriceChange = averageInitialPrice > 0
            ? ((averageCurrentPrice - averageInitialPrice) / averageInitialPrice) * 100
            : 0;

        // Get games with biggest price drops
        var priceChanges = firstPrices.Join(
            lastPrices,
            f => f.GameId,
            l => l.GameId,
            (f, l) => new
            {
                GameId = f.GameId,
                InitialPrice = f.FirstPrice,
                CurrentPrice = l.LastPrice,
                PriceChange = f.FirstPrice > 0
                    ? ((l.LastPrice - f.FirstPrice) / f.FirstPrice) * 100
                    : 0
            })
            .ToList();

        var biggestDrops = priceChanges
            .Where(pc => pc.PriceChange < 0)
            .OrderBy(pc => pc.PriceChange)
            .Take(5)
            .Join(
                platformGames,
                pc => pc.GameId,
                g => g.Id,
                (pc, g) => new
                {
                    GameId = g.Id,
                    Title = g.Title,
                    InitialPrice = pc.InitialPrice,
                    CurrentPrice = pc.CurrentPrice,
                    PriceChangePercent = Math.Round(pc.PriceChange, 2)
                }
            )
            .ToList();

        var biggestIncreases = priceChanges
            .Where(pc => pc.PriceChange > 0)
            .OrderByDescending(pc => pc.PriceChange)
            .Take(5)
            .Join(
                platformGames,
                pc => pc.GameId,
                g => g.Id,
                (pc, g) => new
                {
                    GameId = g.Id,
                    Title = g.Title,
                    InitialPrice = pc.InitialPrice,
                    CurrentPrice = pc.CurrentPrice,
                    PriceChangePercent = Math.Round(pc.PriceChange, 2)
                }
            )
            .ToList();

        return Ok(new
        {
            Platform = platform,
            GameCount = platformGames.Count,
            AverageInitialPrice = Math.Round(averageInitialPrice, 2),
            AverageCurrentPrice = Math.Round(averageCurrentPrice, 2),
            AveragePriceChangePercent = Math.Round(averagePriceChange, 2),
            BiggestPriceDrops = biggestDrops,
            BiggestPriceIncreases = biggestIncreases
        });
    }

    // GET: api/trends/genre/{genre}
    [HttpGet("genre/{genre}")]
    public async Task<ActionResult<object>> GetGenrePriceTrends(string genre)
    {
        // Similar logic to the platform endpoint, but filtered by genre instead
        var genreGames = await _context.Games
            .Where(g => g.Genre.ToLower() == genre.ToLower())
            .ToListAsync();

        if (!genreGames.Any())
        {
            return NotFound($"No games found for genre: {genre}");
        }

        // Rest of implementation similar to platform trends...
        var gameIds = genreGames.Select(g => g.Id).ToList();

        // Get price histories
        var priceHistories = await _context.GamePriceHistories
            .Where(ph => gameIds.Contains(ph.GameId))
            .ToListAsync();

        // Group by game
        var groupedHistories = priceHistories
            .GroupBy(ph => ph.GameId)
            .ToList();

        // Calculate average prices over time by month
        var pricesByMonth = priceHistories
            .GroupBy(ph => new { Month = ph.RecordedAt.Month, Year = ph.RecordedAt.Year })
            .Select(g => new
            {
                Date = new DateTime(g.Key.Year, g.Key.Month, 1),
                AveragePrice = g.Average(ph => ph.Price)
            })
            .OrderBy(x => x.Date)
            .ToList();

        return Ok(new
        {
            Genre = genre,
            GameCount = genreGames.Count,
            CurrentAveragePrice = Math.Round(genreGames.Average(g => g.Price), 2),
            PriceHistory = pricesByMonth
        });
    }
}


=======================================
FILE: NexardaController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\NexardaController.cs
=======================================

using System.Text.Json;

namespace quest4dealsweb.Server.Controllers;

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Caching.Memory;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.Services;
using System;
using System.Net.Http;
using System.Threading.Tasks;

[ApiController]
[Route("api/[controller]")]
public class NexardaController : ControllerBase
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly IMemoryCache _cache;
    private readonly DataContext _context; // Add this
    private readonly PriceHistoryService _priceHistoryService; // Add this

    public NexardaController(IHttpClientFactory httpClientFactory, IMemoryCache cache, DataContext context, PriceHistoryService priceHistoryService)
    {
        _httpClientFactory = httpClientFactory ?? throw new ArgumentNullException(nameof(httpClientFactory));
        _cache = cache ?? throw new ArgumentNullException(nameof(cache));
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _priceHistoryService = priceHistoryService ?? throw new ArgumentNullException(nameof(priceHistoryService));
    }

    [HttpGet("games")]
    public async Task<IActionResult> GetGames([FromQuery] int page = 1, [FromQuery] int limit = 60)
    {
        try
        {
            var cacheKey = $"games_page_{page}_limit_{limit}";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent)) return Ok(cachedContent);

            var client = _httpClientFactory.CreateClient("NexardaClient");
            var response = await client.GetAsync($"search?type=games&page={page}&limit={limit}");
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();

            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));
            _cache.Set(cacheKey, content, cacheOptions);

            return Ok(content);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }

    [HttpGet("games/filter")]
    public async Task<IActionResult> FilterGames(
        [FromQuery] string? genre = null,
        [FromQuery] string? platform = null,
        [FromQuery] string? priceSort = null, // use "asc" or "desc" for finding lowest/highest price or highest/lowest price
        [FromQuery] int page = 1,
        [FromQuery] int limit = 60)
    {
        try
        {
            var cacheKey = $"games_filter_{genre}_{platform}_{priceSort}_page_{page}_limit_{limit}";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent)) return Ok(cachedContent);

            var client = _httpClientFactory.CreateClient("NexardaClient");

            var queryParts = new List<string> { "type=games", $"page={page}", $"limit={limit}" };
            if (!string.IsNullOrWhiteSpace(genre)) queryParts.Add($"game.genres={Uri.EscapeDataString(genre)}");

            var queryString = string.Join("&", queryParts);
            var response = await client.GetAsync($"search?{queryString}");
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();

            var data = JsonSerializer.Deserialize<JsonElement>(content);
            var items = data.GetProperty("results").GetProperty("items").EnumerateArray();

            // Filter by platform
            var filteredItems = items
                .Where(item =>
                {
                    if (!string.IsNullOrWhiteSpace(platform))
                    {
                        if (!item.GetProperty("game_info").TryGetProperty("platforms", out var platforms))
                            return false;

                        return platforms.EnumerateArray()
                            .Any(p => string.Equals(p.GetProperty("slug").GetString(), platform,
                                StringComparison.OrdinalIgnoreCase));
                    }

                    return true;
                })
                .ToList();

            // Sort by lowest price
            if (priceSort?.ToLower() == "asc")
                filteredItems = filteredItems
                    .OrderBy(item => item.GetProperty("game_info").GetProperty("lowest_price").GetDecimal())
                    .ToList();
            else if (priceSort?.ToLower() == "desc")
                filteredItems = filteredItems
                    .OrderByDescending(item => item.GetProperty("game_info").GetProperty("lowest_price").GetDecimal())
                    .ToList();

            // Pagination after filtering/sorting
            var pagedItems = filteredItems
                .Skip((page - 1) * limit)
                .Take(limit)
                .ToList();

            // Extract metadata for result
            var success = data.GetProperty("success");
            var message = data.GetProperty("message");
            var pageValue = page;
            var pagesValue = (int)Math.Ceiling((double)filteredItems.Count / limit);

            var resultObject = new
            {
                success,
                message,
                results = new
                {
                    page = pageValue,
                    pages = pagesValue,
                    shown = pagedItems.Count,
                    total = filteredItems.Count,
                    items = pagedItems
                }
            };

            var modifiedContent = JsonSerializer.Serialize(resultObject);

            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));

            _cache.Set(cacheKey, modifiedContent, cacheOptions);

            return Ok(modifiedContent);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }


    [HttpGet("product")]
    public async Task<IActionResult> GetProduct([FromQuery] string id, [FromQuery] string type = "game")
    {
        try
        {
            var cacheKey = $"product_{type}_{id}";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent))
            {
                // Still try to update price history even when using cached data
                await TryUpdatePriceHistoryFromCachedContent(cachedContent, id);
                return Ok(cachedContent);
            }

            var client = _httpClientFactory.CreateClient("NexardaClient");
            var response = await client.GetAsync($"product?type={type}&id={id}");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();

            // Try to update the price history
            await TryUpdatePriceHistoryFromCachedContent(content, id);

            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));
            _cache.Set(cacheKey, content, cacheOptions);

            return Ok(content);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }

    // Add this helper method to NexardaController
    private async Task TryUpdatePriceHistoryFromCachedContent(string content, string idString)
    {
        try
        {
            if (!int.TryParse(idString, out int gameId))
                return;

            // Parse the JSON content
            using var doc = JsonDocument.Parse(content);
            var root = doc.RootElement;

            // Extract the current price from the response
            if (root.TryGetProperty("prices", out var pricesProp) &&
                pricesProp.TryGetProperty("lowest", out var lowestPriceProp) &&
                decimal.TryParse(lowestPriceProp.ToString(), out decimal currentPrice))
            {
                // Check if game exists in our database, if not create it
                var game = await _context.Games.FindAsync(gameId);
                if (game == null)
                {
                    // Extract game title
                    string title = "Unknown Game";
                    if (root.TryGetProperty("title", out var titleProp))
                    {
                        title = titleProp.GetString() ?? title;
                    }

                    string genre = "Not Specified";
                    if (root.TryGetProperty("genre", out var genreProp))
                    {
                        genre = genreProp.GetString() ?? genre;
                    }

                    game = new Game
                    {
                        Id = gameId,
                        Title = title,
                        Genre = genre,
                        Price = currentPrice,
                        UserId = "system", // Default user ID for system-created entries
                        Platform = "Unknown" // Default platform
                    };

                    _context.Games.Add(game);
                    await _context.SaveChangesAsync();
                }
                else
                {
                    // Update the current price in the Games table if it's different
                    if (game.Price != currentPrice)
                    {
                        game.Price = currentPrice;
                        _context.Games.Update(game);
                        await _context.SaveChangesAsync();
                    }
                }

                // Update price history
                await _priceHistoryService.CheckAndUpdatePriceHistory(gameId, currentPrice);
            }
        }
        catch (Exception)
        {
            // Log the error but don't fail the request
            // This is a background task that shouldn't affect the main API response
        }
    }

    [HttpGet("retailers")]
    public async Task<IActionResult> GetRetailers()
    {
        try
        {
            var cacheKey = "retailers";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent)) return Ok(cachedContent);

            var client = _httpClientFactory.CreateClient("NexardaClient");
            var response = await client.GetAsync("retailers");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();

            using var doc = JsonDocument.Parse(content);
            var root = doc.RootElement;

            var allowedUsStoreNames = new[]
            {
                "Best Buy", "GameStop", "Walmart", "Target", "GameFly",
                "Steam", "Epic Games Store", "Humble Store", "PlayStation Store", "PlayStation Direct",
                "Microsoft Store", "Nintendo eShop", "Kohl's"
            };

            // Filter root array
            var filteredStores = root.EnumerateArray()
                .Where(store =>
                    store.TryGetProperty("name", out var nameProp) &&
                    allowedUsStoreNames.Contains(nameProp.GetString()))
                .ToList();

            var filteredJson = JsonSerializer.Serialize(filteredStores, new JsonSerializerOptions
            {
                WriteIndented = true
            });

            var cacheOptions = new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(30));
            _cache.Set(cacheKey, filteredJson, cacheOptions);

            return Ok(filteredJson);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }


    [HttpGet("search")]
    public async Task<IActionResult> SearchProducts(
        [FromQuery] string query,
        [FromQuery] string type = "games",
        [FromQuery] int page = 1,
        [FromQuery] int limit = 60)
    {
        try
        {
            var cacheKey = $"search_{query}_{type}_{page}_{limit}";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent)) return Ok(cachedContent);

            var client = _httpClientFactory.CreateClient("NexardaClient");
            var response = await client.GetAsync(
                $"search?q={Uri.EscapeDataString(query)}&type={type}&page={page}&limit={limit}");
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();

            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(5));
            _cache.Set(cacheKey, content, cacheOptions);

            return Ok(content);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }

    [HttpGet("prices")]
    public async Task<IActionResult> GetProductPrices(
        [FromQuery] string id,
        [FromQuery] string type = "game",
        [FromQuery] string currency = "USD")
    {
        try
        {
            var cacheKey = $"prices_{type}_{id}_{currency}";

            if (_cache.TryGetValue(cacheKey, out string? cachedContent)) return Ok(cachedContent);

            var client = _httpClientFactory.CreateClient("NexardaClient");
            var response = await client.GetAsync($"prices?type={type}&id={id}&currency={currency}");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();

            // Deserialize response into dynamic object
            using var doc = JsonDocument.Parse(content);
            var root = doc.RootElement;

            var allowedUsStoreNames = new[]
            {
                "Best Buy", "Target", "Walmart", "GameStop",
                "GameFly", "PlayStation Store", "Epic Games Store", "Steam", "Humble Store",
                "Microsoft Store", "Nintendo eShop", "GOG", "Ubisoft Store"
            };

            // Copy metadata info
            var filteredResult = new
            {
                success = root.GetProperty("success").GetBoolean(),
                message = root.GetProperty("message").GetString(),
                info = root.GetProperty("info"),
                prices = new
                {
                    currency = root.GetProperty("prices").GetProperty("currency").GetString(),
                    lowest = root.GetProperty("prices").GetProperty("lowest").GetDecimal(),
                    highest = root.GetProperty("prices").GetProperty("highest").GetDecimal(),
                    stores = root.GetProperty("prices").GetProperty("stores").GetInt32(),
                    offers = root.GetProperty("prices").GetProperty("offers").GetInt32(),
                    editions = root.GetProperty("prices").GetProperty("editions"),
                    regions = root.GetProperty("prices").GetProperty("regions"),
                    list = root.GetProperty("prices").GetProperty("list")
                        .EnumerateArray()
                        .Where(entry =>
                            entry.TryGetProperty("store", out var store) &&
                            store.TryGetProperty("name", out var name) &&
                            allowedUsStoreNames.Contains(name.GetString())
                        ).ToList()
                }
            };

            var filteredJson = JsonSerializer.Serialize(filteredResult, new JsonSerializerOptions
            {
                WriteIndented = true
            });

            var cacheOptions = new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(5));
            _cache.Set(cacheKey, filteredJson, cacheOptions);

            return Ok(filteredJson);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }
}


=======================================
FILE: PriceHistoryController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\PriceHistoryController.cs
=======================================

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace quest4dealsweb.Server.Controllers
{
    [ApiController]
    [Route("api/price-history")]
    public class PriceHistoryController : ControllerBase
    {
        private readonly DataContext _context;

        public PriceHistoryController(DataContext context)
        {
            _context = context;
        }

        [HttpGet("stats/{gameId}")]
        public async Task<IActionResult> GetPriceHistoryStats(int gameId)
        {
            try
            {
                // Check if the game exists
                var game = await _context.Games.FindAsync(gameId);
                if (game == null)
                {
                    return NotFound($"Game with ID {gameId} not found");
                }

                // Get price history sorted by date
                var priceHistory = await _context.GamePriceHistories
                    .Where(ph => ph.GameId == gameId)
                    .OrderBy(ph => ph.RecordedAt)
                    .Select(ph => new
                    {
                        ph.Id,
                        ph.GameId,
                        ph.Price,
                        ph.RecordedAt
                    })
                    .ToListAsync();

                // Calculate stats if there is history data
                var stats = new
                {
                    CurrentPrice = game.Price,
                    LowestPrice = priceHistory.Any() ? priceHistory.Min(ph => ph.Price) : game.Price,
                    HighestPrice = priceHistory.Any() ? priceHistory.Max(ph => ph.Price) : game.Price,
                    AveragePrice = priceHistory.Any() ? priceHistory.Average(ph => ph.Price) : game.Price,
                    PriceChangesCount = priceHistory.Count,
                    LatestChange = priceHistory.OrderByDescending(ph => ph.RecordedAt).FirstOrDefault()
                };

                return Ok(new
                {
                    GameId = gameId,
                    GameTitle = game.Title,
                    PriceHistory = priceHistory,
                    Stats = stats
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        [HttpGet("chart/{gameId}")]
        public async Task<IActionResult> GetPriceHistoryChartData(int gameId)
        {
            try
            {
                // Check if the game exists
                var game = await _context.Games.FindAsync(gameId);
                if (game == null)
                {
                    return NotFound($"Game with ID {gameId} not found");
                }

                // Get simplified price history for chart rendering
                var priceHistory = await _context.GamePriceHistories
                    .Where(ph => ph.GameId == gameId)
                    .OrderBy(ph => ph.RecordedAt)
                    .Select(ph => new
                    {
                        Date = ph.RecordedAt.ToString("yyyy-MM-dd"),
                        Price = ph.Price
                    })
                    .ToListAsync();

                return Ok(new
                {
                    Labels = priceHistory.Select(p => p.Date).ToArray(),
                    Prices = priceHistory.Select(p => p.Price).ToArray()
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}



=======================================
FILE: RAWGController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\RAWGController.cs
=======================================

ï»¿namespace quest4dealsweb.Server.Controllers;

using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;

[ApiController]
[Route("api/[controller]")]
public class RAWGController : ControllerBase
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<RAWGController> _logger;
    private const string ApiKey = "73366dd5bac940d28ae476c4abf9abc5"; // Replace with your RAWG API key
    private const string BaseUrl = "https://api.rawg.io/api";

    public RAWGController(ILogger<RAWGController> logger)
    {
        _httpClient = new HttpClient();
        _logger = logger;
    }

    // GET: api/rawg/genres/{gameName}
    [HttpGet("genres/{gameName}")]
    public async Task<ActionResult<GenreResponse>> GetGameGenres(string gameName)
    {
        try
        {
            var url = $"{BaseUrl}/games?key={ApiKey}&search={gameName}&page_size=1";
            var response = await _httpClient.GetAsync(url);
            response.EnsureSuccessStatusCode();
            
            var json = await response.Content.ReadAsStringAsync();
            var searchResponse = JsonSerializer.Deserialize<GameSearchResponse>(json, 
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (searchResponse?.Results == null || !searchResponse.Results.Any())
            {
                return NotFound($"No game found with name '{gameName}'");
            }

            var game = searchResponse.Results.First();
            var genres = game.Genres.Select(g => g.Name).ToList();

            var genreResponse = new GenreResponse
            {
                GameName = game.Name,
                Genres = genres
            };

            return Ok(genreResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"Error getting genres for game: {gameName}");
            return StatusCode(500, "An error occurred while retrieving game genres");
        }
    }
    
}

// Response Models
public class GenreResponse
{
    public string GameName { get; set; }
    public List<string> Genres { get; set; }
}

public class GameSearchResponse
{
    public List<GameDetails> Results { get; set; }
}

public class GameDetails
{
    public int Id { get; set; }
    public string Name { get; set; }
    public List<Genre> Genres { get; set; }
}

public class Genre
{
    public int Id { get; set; }
    public string Name { get; set; }
}


=======================================
FILE: WatchlistController.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Controllers\WatchlistController.cs
=======================================

ï»¿using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;

namespace quest4dealsweb.Server.Controllers;

[ApiController]
[Route("api/[controller]")]
[Authorize]
public class WatchlistController : ControllerBase
{
    private readonly DataContext _context;
    private readonly UserManager<User> _userManager;
    private readonly ILogger<WatchlistController> _logger;

    public WatchlistController(
        DataContext context,
        UserManager<User> userManager,
        ILogger<WatchlistController> logger)
    {
        _context = context;
        _userManager = userManager;
        _logger = logger;
    }

    // Check if game is in watchlist
    [HttpGet("check/{id}")]
    public async Task<IActionResult> CheckWatchlist(int id)
    {
        var user = await _userManager.GetUserAsync(User);
        if (user == null)
        {
            _logger.LogWarning("CheckWatchlist: User not authenticated");
            return Unauthorized(new { message = "User not authenticated" });
        }

        var game = await _context.Games
            .FirstOrDefaultAsync(g => g.ExternalGameId == id && g.UserId == user.Id);

        return Ok(new
        {
            isWatchlisted = game != null,
            getNotified = game?.GetNotified ?? true,
            genre = game?.Genre ?? string.Empty,
            platform = game?.Platform ?? string.Empty
        });
    }

    // Add to watchlist
    [HttpPost("add/{id}")]
    public async Task<IActionResult> AddToWatchlist(int id, [FromBody] WatchlistGameDto gameDto)
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            _logger.LogInformation($"AddToWatchlist: User {user?.Id}, Game {id}");

            if (user == null)
            {
                _logger.LogWarning("AddToWatchlist: User not authenticated");
                return Unauthorized(new { message = "User not authenticated" });
            }

            var existingGame = await _context.Games
                .FirstOrDefaultAsync(g => g.ExternalGameId == id && g.UserId == user.Id && g.Platform == gameDto.Platform);

            if (existingGame != null)
            {
                _logger.LogInformation($"AddToWatchlist: Game {id} already in watchlist for user {user.Id} on platform {gameDto.Platform}");
                return BadRequest(new { message = "Game already in watchlist" });
            }

            var game = new Game
            {
                ExternalGameId = id,
                Title = gameDto.GameTitle,
                Platform = gameDto.Platform,
                Price = gameDto.CurrentPrice,
                Genre = gameDto.Genre,
                UserId = user.Id,
                GetNotified = gameDto.GetNotified
            };

            _context.Games.Add(game);
            await _context.SaveChangesAsync();

            _logger.LogInformation($"AddToWatchlist: Game {id} added for user {user.Id} on platform {gameDto.Platform}");

            return Ok(new { message = "Game added to watchlist" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"AddToWatchlist: Error for game {id}");
            return StatusCode(500, new { message = "Failed to add game to watchlist" });
        }
    }

    // Update notification setting
    [HttpPut("notify/{id}")]
    public async Task<IActionResult> UpdateNotificationSetting(int id, [FromBody] WatchlistGameDto gameDto)
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                _logger.LogWarning("UpdateNotificationSetting: User not authenticated");
                return Unauthorized(new { message = "User not authenticated" });
            }

            var game = await _context.Games
                .FirstOrDefaultAsync(g => g.ExternalGameId == id && g.UserId == user.Id && g.Platform == gameDto.Platform);

            if (game == null)
            {
                _logger.LogWarning($"UpdateNotificationSetting: Game {id} not found for user {user.Id} on platform {gameDto.Platform}");
                return NotFound(new { message = "Game not found in watchlist" });
            }

            game.GetNotified = gameDto.GetNotified;
            await _context.SaveChangesAsync();

            _logger.LogInformation($"UpdateNotificationSetting: Updated for game {id}, user {user.Id}, platform {gameDto.Platform}");

            return Ok(new { message = "Notification setting updated" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"UpdateNotificationSetting: Error for game {id}");
            return StatusCode(500, new { message = "Failed to update notification setting" });
        }
    }

    // Remove from watchlist
    [HttpPost("remove/{id}")]
    public async Task<IActionResult> RemoveFromWatchlist(int id, [FromBody] WatchlistGameDto gameDto)
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                _logger.LogWarning("RemoveFromWatchlist: User not authenticated");
                return Unauthorized(new { message = "User not authenticated" });
            }

            var game = await _context.Games
                .FirstOrDefaultAsync(g => g.ExternalGameId == id && g.UserId == user.Id && g.Platform == gameDto.Platform);

            if (game == null)
            {
                _logger.LogWarning($"RemoveFromWatchlist: Game {id} not found for user {user.Id} on platform {gameDto.Platform}");
                return NotFound(new { message = "Game not found in watchlist" });
            }

            _context.Games.Remove(game);
            await _context.SaveChangesAsync();

            _logger.LogInformation($"RemoveFromWatchlist: Game {id} removed for user {user.Id} on platform {gameDto.Platform}");

            return Ok(new { message = "Game removed from watchlist" });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"RemoveFromWatchlist: Error for game {id}");
            return StatusCode(500, new { message = "Failed to remove game from watchlist" });
        }
    }

    // Get user's watchlist
    [HttpGet]
    public async Task<IActionResult> GetWatchlist()
    {
        try
        {
            var user = await _userManager.GetUserAsync(User);
            if (user == null)
            {
                _logger.LogWarning("GetWatchlist: User not authenticated");
                return Unauthorized(new { message = "User not authenticated" });
            }

            var watchlist = await _context.Games
                .Where(g => g.UserId == user.Id)
                .Select(g => new
                {
                    g.ExternalGameId,
                    g.Title,
                    g.Platform,
                    g.Price,
                    g.Genre,
                    g.GetNotified
                })
                .ToListAsync();

            return Ok(watchlist);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "GetWatchlist: Error");
            return StatusCode(500, new { message = "Failed to retrieve watchlist" });
        }
    }
}

// DTO for watchlist operations
public class WatchlistGameDto
{
    public string GameTitle { get; set; } = string.Empty;
    public string Platform { get; set; } = string.Empty;
    public decimal CurrentPrice { get; set; }
    public string Genre { get; set; } = string.Empty;
    public bool GetNotified { get; set; } = true;
}


=======================================
FILE: DataContext.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Data\DataContext.cs
=======================================

using quest4dealsweb.Server.models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace quest4dealsweb.Server.Data;

public class DataContext : IdentityDbContext<User>
{
    public DataContext(DbContextOptions<DataContext> options) : base(options) { }

    public DbSet<Game> Games { get; set; }
    public DbSet<GamePriceHistory> GamePriceHistories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder); // Ensure Identity is configured properly

        // Ensure that Email is unique (already unique by default in Identity)
        modelBuilder.Entity<User>()
            .HasIndex(u => u.Email)
            .IsUnique();

        // Ensure that UserName is unique (replaces Username)
        modelBuilder.Entity<User>()
            .HasIndex(u => u.UserName)
            .IsUnique();

        modelBuilder.Entity<Game>()
            .Property(g => g.Price)
            .HasPrecision(18, 2);

        // Configure GetNotified default value
        modelBuilder.Entity<Game>()
            .Property(g => g.GetNotified)
            .HasDefaultValue(true);

        // Add a composite index on ExternalGameId and UserId to ensure uniqueness
        modelBuilder.Entity<Game>()
            .HasIndex(g => new { g.ExternalGameId, g.UserId })
            .IsUnique();

        modelBuilder.Entity<Game>()
            .HasOne<User>()
            .WithMany()
            .HasForeignKey(g => g.UserId)
            .OnDelete(DeleteBehavior.Cascade);

        // Configure GamePriceHistory
        modelBuilder.Entity<GamePriceHistory>()
            .HasKey(ph => ph.Id);

        modelBuilder.Entity<GamePriceHistory>()
            .HasOne<Game>() // Reference Game without navigation property
            .WithMany()
            .HasForeignKey(ph => ph.GameId)
            .OnDelete(DeleteBehavior.Cascade);
    }
}


=======================================
FILE: IdentityEndpoints.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Endpoints\IdentityEndpoints.cs
=======================================

using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using quest4dealsweb.Server.models;

namespace quest4dealsweb.Server.Endpoints;

public static class IdentityEndpoints
{
    public static RouteGroupBuilder MapIdentityRoutes(this IEndpointRouteBuilder app)
    {
        var identityRoutes = app.MapGroup("/api/auth");

        // Register User
        identityRoutes.MapPost("/register", async ([FromBody] RegisterModel model, 
            UserManager<User> userManager,
            ILogger<User> logger) =>
        {
            try
            {
                // Validate email
                if (await userManager.FindByEmailAsync(model.Email) != null)
                {
                    logger.LogWarning($"Registration attempted with existing email: {model.Email}");
                    return Results.BadRequest(new { Message = "Email is already in use." });
                }

                // Validate username
                if (await userManager.FindByNameAsync(model.UserName) != null)
                {
                    logger.LogWarning($"Registration attempted with existing username: {model.UserName}");
                    return Results.BadRequest(new { Message = "Username is already taken." });
                }

                // Create new user
                var user = new User
                {
                    Name = model.Name,
                    UserName = model.UserName,
                    Email = model.Email,
                    CreatedAt = DateTime.UtcNow
                };

                var result = await userManager.CreateAsync(user, model.Password);

                if (!result.Succeeded)
                {
                    logger.LogError($"Failed to create user: {string.Join(", ", result.Errors)}");
                    return Results.BadRequest(result.Errors);
                }

                logger.LogInformation($"User registered successfully: {user.Id}");
                return Results.Ok(new
                {
                    Message = "User registered successfully",
                    User = new
                    {
                        user.Id,
                        user.UserName,
                        user.Name,
                        user.Email
                    }
                });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error during user registration");
                return Results.StatusCode(500);
            }
        });

        // Login User
        identityRoutes.MapPost("/login", async ([FromBody] LoginModel model, 
            SignInManager<User> signInManager, 
            UserManager<User> userManager,
            ILogger<User> logger) =>
        {
            try
            {
                // Find user by email or username
                var user = await userManager.FindByEmailAsync(model.UserNameOrEmail)
                    ?? await userManager.FindByNameAsync(model.UserNameOrEmail);

                if (user == null)
                {
                    logger.LogWarning($"Login attempted with non-existent user: {model.UserNameOrEmail}");
                    return Results.Unauthorized();
                }

                // Always sign out first to ensure clean session
                await signInManager.SignOutAsync();

                // Attempt login
                var result = await signInManager.PasswordSignInAsync(
                    user.UserName,
                    model.Password,
                    isPersistent: model.RememberMe,
                    lockoutOnFailure: false
                );

                if (!result.Succeeded)
                {
                    logger.LogWarning($"Failed login attempt for user: {user.Id}");
                    return Results.Unauthorized();
                }

                logger.LogInformation($"User logged in successfully: {user.Id}");
                return Results.Ok(new
                {
                    message = "Login successful",
                    user = new
                    {
                        user.Id,
                        user.UserName,
                        user.Email
                    }
                });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error during login");
                return Results.StatusCode(500);
            }
        });

        // Get User Profile
        identityRoutes.MapGet("/profile", [Authorize] async (
            UserManager<User> userManager,
            ClaimsPrincipal userClaims,
            ILogger<User> logger) =>
        {
            try
            {
                var user = await userManager.GetUserAsync(userClaims);

                if (user == null)
                {
                    logger.LogWarning("Profile request from unauthorized user");
                    return Results.Unauthorized();
                }

                logger.LogInformation($"Profile retrieved for user: {user.Id}");
                return Results.Ok(new
                {
                    Id = user.Id,
                    Name = user.Name,
                    UserName = user.UserName,
                    Email = user.Email
                });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error retrieving user profile");
                return Results.StatusCode(500);
            }
        });

        // Logout User
        identityRoutes.MapPost("/logout", async (
            SignInManager<User> signInManager,
            ILogger<User> logger) =>
        {
            try
            {
                await signInManager.SignOutAsync();
                logger.LogInformation("User logged out");
                return Results.Ok(new { Message = "Logged out successfully" });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error during logout");
                return Results.StatusCode(500);
            }
        });

        // Reset Password
        identityRoutes.MapPost("/reset-password", async ([FromBody] ResetPasswordModel model,
            UserManager<User> userManager,
            ILogger<User> logger) =>
        {
            try
            {
                var user = await userManager.FindByEmailAsync(model.Email);
                if (user == null)
                {
                    logger.LogWarning($"Password reset attempted for non-existent email: {model.Email}");
                    return Results.BadRequest("Invalid email");
                }

                var resetToken = await userManager.GeneratePasswordResetTokenAsync(user);
                var result = await userManager.ResetPasswordAsync(user, resetToken, model.NewPassword);

                if (!result.Succeeded)
                {
                    logger.LogWarning($"Password reset failed for user: {user.Id}");
                    return Results.BadRequest(result.Errors);
                }

                logger.LogInformation($"Password reset successful for user: {user.Id}");
                return Results.Ok(new { Message = "Password reset successful" });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error during password reset");
                return Results.StatusCode(500);
            }
        });

        // Update User Profile
        identityRoutes.MapPut("/update-profile", [Authorize] async (
            [FromBody] UpdateProfileModel model,
            UserManager<User> userManager,
            ClaimsPrincipal userClaims,
            ILogger<User> logger) =>
        {
            try
            {
                var user = await userManager.GetUserAsync(userClaims);
                if (user == null)
                {
                    logger.LogWarning("Profile update attempted by unauthorized user");
                    return Results.Unauthorized();
                }

                // Check if new username is already taken (if username is being changed)
                if (model.UserName != user.UserName)
                {
                    var existingUser = await userManager.FindByNameAsync(model.UserName);
                    if (existingUser != null)
                    {
                        return Results.BadRequest(new { Message = "Username is already taken" });
                    }
                }

                // Check if new email is already taken (if email is being changed)
                if (model.Email != user.Email)
                {
                    var existingUser = await userManager.FindByEmailAsync(model.Email);
                    if (existingUser != null)
                    {
                        return Results.BadRequest(new { Message = "Email is already in use" });
                    }
                }

                user.Name = model.Name;
                user.UserName = model.UserName;
                user.Email = model.Email;

                var result = await userManager.UpdateAsync(user);
                if (!result.Succeeded)
                {
                    logger.LogWarning($"Profile update failed for user: {user.Id}");
                    return Results.BadRequest(result.Errors);
                }

                logger.LogInformation($"Profile updated for user: {user.Id}");
                return Results.Ok(new { Message = "User profile updated successfully" });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error updating user profile");
                return Results.StatusCode(500);
            }
        });

        // Delete User Account
        identityRoutes.MapDelete("/delete", [Authorize] async (
            UserManager<User> userManager,
            ClaimsPrincipal userClaims,
            SignInManager<User> signInManager,
            ILogger<User> logger) =>
        {
            try
            {
                var user = await userManager.GetUserAsync(userClaims);
                if (user == null)
                {
                    logger.LogWarning("Account deletion attempted by unauthorized user");
                    return Results.Unauthorized();
                }

                var result = await userManager.DeleteAsync(user);
                if (!result.Succeeded)
                {
                    logger.LogWarning($"Account deletion failed for user: {user.Id}");
                    return Results.BadRequest(result.Errors);
                }

                await signInManager.SignOutAsync();
                logger.LogInformation($"User account deleted: {user.Id}");
                return Results.Ok(new { Message = "User account deleted successfully" });
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error deleting user account");
                return Results.StatusCode(500);
            }
        });

        return identityRoutes;
    }
}

// Models (if not already defined elsewhere)
public class RegisterModel
{
    public string Name { get; set; } = string.Empty;
    public string UserName { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
}

public class LoginModel
{
    public string UserNameOrEmail { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    public bool RememberMe { get; set; }
}

public class ResetPasswordModel
{
    public string Email { get; set; } = string.Empty;
    public string NewPassword { get; set; } = string.Empty;
}

public class UpdateProfileModel
{
    public string Name { get; set; } = string.Empty;
    public string UserName { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}


=======================================
FILE: 20250329003248_AddGamePriceHistory.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Migrations\20250329003248_AddGamePriceHistory.cs
=======================================

ï»¿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace quest4dealsweb.Server.Migrations
{
    public partial class AddGamePriceHistory : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "GamePriceHistories",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GameId = table.Column<int>(type: "int", nullable: false),
                    Price = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    RecordedAt = table.Column<DateTime>(type: "datetime2", nullable: false, defaultValueSql: "GETUTCDATE()")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GamePriceHistories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GamePriceHistories_Games_GameId",
                        column: x => x.GameId,
                        principalTable: "Games",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_GamePriceHistories_GameId",
                table: "GamePriceHistories",
                column: "GameId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "GamePriceHistories");
        }
    }
}


=======================================
FILE: 20250329003248_AddGamePriceHistory.Designer.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Migrations\20250329003248_AddGamePriceHistory.Designer.cs
=======================================

ï»¿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quest4dealsweb.Server.Data;

#nullable disable

namespace quest4dealsweb.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250329003248_AddGamePriceHistory")]
    partial class AddGamePriceHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.GamePriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePriceHistories");
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.GamePriceHistory", b =>
                {
                    b.HasOne("Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });
#pragma warning restore 612, 618
        }
    }
}



=======================================
FILE: DataContextModelSnapshot.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Migrations\DataContextModelSnapshot.cs
=======================================

ï»¿// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quest4dealsweb.Server.Data;

#nullable disable

namespace quest4dealsweb.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.GamePriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamePriceHistories");
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Game", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("quest4dealsweb.Server.models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("quest4dealsweb.Server.models.GamePriceHistory", b =>
                {
                    b.HasOne("Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });
#pragma warning restore 612, 618
        }
    }
}



=======================================
FILE: Game.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\Game.cs
=======================================

public class Game
{
    public int Id { get; set; }
    
    public int ExternalGameId { get; set; } // â Unique identifier for the game
    
    public string Title { get; set; } = string.Empty; 
    public string Genre { get; set; } = string.Empty;
    public string Platform { get; set; } = string.Empty;
    public decimal Price { get; set; }
    public bool GetNotified { get; set; } = true;
    public string UserId { get; set; } // â Foreign Key (No navigation property)
}


=======================================
FILE: GamePriceHistory.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\GamePriceHistory.cs
=======================================

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace quest4dealsweb.Server.models;
public class GamePriceHistory
{
    public int Id { get; set; } // Auto-generated by DB
    public int GameId { get; set; }
    public decimal Price { get; set; }
    public DateTime RecordedAt { get; set; }
    // Optional: public Game Game { get; set; } (navigation property, not in request)
}


=======================================
FILE: GamePriceHistoryDto.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\GamePriceHistoryDto.cs
=======================================

public class GamePriceHistoryDto
{
    public int GameId { get; set; }
    public decimal Price { get; set; }
}


=======================================
FILE: GamePriceTrendDto.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\GamePriceTrendDto.cs
=======================================

namespace quest4dealsweb.Server.models;

public class GamePriceTrendDto
{
    public int GameId { get; set; }
    public string Title { get; set; }
    public string Genre { get; set; }
    public string Platform { get; set; }
    public decimal CurrentPrice { get; set; }
    public decimal InitialPrice { get; set; }
    public decimal LowestPrice { get; set; }
    public decimal HighestPrice { get; set; }
    public decimal PriceChangePercentage { get; set; } // From initial to current
    public DateTime LastUpdated { get; set; }
    public int TotalPriceChanges { get; set; }
    public List<PricePoint> PricePoints { get; set; } = new List<PricePoint>();
}

public class PricePoint
{
    public DateTime Date { get; set; }
    public decimal Price { get; set; }
}


=======================================
FILE: LoginModel.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\LoginModel.cs
=======================================

namespace quest4dealsweb.Server.models;

public class LoginModel
{
    public string UserNameOrEmail { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    
    public bool RememberMe { get; set; }
}


=======================================
FILE: RegisterModel.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\RegisterModel.cs
=======================================

namespace quest4dealsweb.Server.models;

public class RegisterModel
{
    public string Name { get; set; } = string.Empty;
    public string UserName { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
}



=======================================
FILE: ResetPasswordModel.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\ResetPasswordModel.cs
=======================================

namespace quest4dealsweb.Server.models;

public class ResetPasswordModel
{
    public string Email { get; set; } = string.Empty;
    public string NewPassword { get; set; } = string.Empty;
}


=======================================
FILE: UpdateProfileModel.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\UpdateProfileModel.cs
=======================================

namespace quest4dealsweb.Server.models;

public class UpdateProfileModel
{
    public string Name { get; set; } = string.Empty;
    public string UserName { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
}



=======================================
FILE: User.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\models\User.cs
=======================================

namespace quest4dealsweb.Server.models;

using Microsoft.AspNetCore.Identity;

public class User : IdentityUser 
{
    public string Name { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
}



=======================================
FILE: notifs.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\notifications\notifs.cs
=======================================

using System;
using System.Threading.Tasks;

// Remove the System.Net.Mail import to avoid conflicts with MailKit
using MailKit.Net.Smtp;
using MailKit.Security;
using MimeKit;

namespace quest4dealsweb.Server.notifications
{
    class Program
    {
        // Email configuration with your specified values
        private static readonly string SmtpServer = "smtp.gmail.com";
        private static readonly int SmtpPort = 587;

        private static readonly string SmtpUsername = "quest4deals.notification@gmail.com";
        private static readonly string SmtpPassword = "ynwc mamy hrci sytz";
        private static readonly string SenderEmail = "quest4deals.notification@gmail.com";
        private static readonly string SenderName = "Quest4Deals";

        private static readonly string RecipientEmail = "adrianlfudge@gmail.com";

        // Email contents
        private static readonly string EmailHeader = "Saved Game Price Change Notification";
        private static readonly string EmailBody = "<p>Your saved game <GAME> has hit the price threshold of <PRICE_THRESHOLD> that you set on the <PLATFORM> platform</p>";

        // Changed the name to Main to make it the program entry point
        // Add this new method to your class
        public static void SendEmail(string recipientEmail, string emailHeader, string emailBody)
        {
            if(recipientEmail == null || emailBody == null || emailBody == null) { Console.WriteLine("Invalid Parameters in SendEmail");  return; }

            try
            {
                // This line runs the task synchronously
                SendEmailAsync(
                    recipientEmail,
                    emailHeader,
                    emailBody).GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending email: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }
        }


        public static async Task SendEmailAsync(string to, string subject, string htmlBody)
        {
            var message = new MimeMessage();
            message.From.Add(new MailboxAddress(SenderName, SenderEmail));
            message.To.Add(MailboxAddress.Parse(to));
            message.Subject = subject;

            var bodyBuilder = new BodyBuilder
            {
                HtmlBody = htmlBody
            };

            message.Body = bodyBuilder.ToMessageBody();

            using (var client = new SmtpClient())
            {
                // This line enables client debugging output to console
                client.Connect(SmtpServer, SmtpPort, SecureSocketOptions.StartTls);

                // Authenticate with the SMTP server
                client.Authenticate(SmtpUsername, SmtpPassword);

                // Send the email
                await client.SendAsync(message);

                // Disconnect properly
                await client.DisconnectAsync(true);
            }
        }
    }
}



=======================================
FILE: launchSettings.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Properties\launchSettings.json
=======================================

{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:45404",
      "sslPort": 44377
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5039",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7233;http://localhost:5039",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    }
  }
}




=======================================
FILE: serviceDependencies.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Properties\serviceDependencies.json
=======================================

{
  "dependencies": {}
}


=======================================
FILE: serviceDependencies.local.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Properties\serviceDependencies.local.json
=======================================

{
  "dependencies": {}
}


=======================================
FILE: serviceDependencies.local.json.user
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Properties\serviceDependencies.local.json.user
=======================================

{
  "dependencies": {},
  "parameters": {}
}


=======================================
FILE: PriceHistoryService.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Services\PriceHistoryService.cs
=======================================

using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models; // Note: lowercase "models" instead of "Models"
using System;
using System.Linq;
using System.Threading.Tasks;

namespace quest4dealsweb.Server.Services
{
    public class PriceHistoryService
    {
        private readonly DataContext _context;

        public PriceHistoryService(DataContext context)
        {
            _context = context;
        }

        public async Task<bool> CheckAndUpdatePriceHistory(int gameId, decimal currentPrice)
        {
            // Get the latest price record for the game
            var latestPrice = await _context.GamePriceHistories
                .Where(ph => ph.GameId == gameId)
                .OrderByDescending(ph => ph.RecordedAt)
                .FirstOrDefaultAsync();

            // Check if price has changed or if this is the first price record
            if (latestPrice == null || latestPrice.Price != currentPrice)
            {
                // Add new price record
                var newPriceHistory = new GamePriceHistory
                {
                    GameId = gameId,
                    Price = currentPrice,
                    RecordedAt = DateTime.UtcNow
                };

                _context.GamePriceHistories.Add(newPriceHistory);
                await _context.SaveChangesAsync();
                return true; // Price was updated
            }

            return false; // No price change
        }
    }
}


=======================================
FILE: appsettings.Development.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\appsettings.Development.json
=======================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}



=======================================
FILE: appsettings.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\appsettings.json
=======================================

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {
    "DefaultConnection": "Server=tcp:quest4dealsdb.cxy4m2is80f4.us-west-2.rds.amazonaws.com,1433;Initial Catalog=Quest4DealsDB;Persist Security Info=False;User ID=adminDB;Password=Quest4Deals25;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30"
  },
  "AllowedHosts": "*"
}



=======================================
FILE: package.json
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\package.json
=======================================

{
  "dependencies": {
    "chart.js": "^4.4.9",
    "react-chartjs-2": "^5.3.0"
  }
}



=======================================
FILE: Program.cs
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\Program.cs
=======================================

using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using quest4dealsweb.Server.Data;
using quest4dealsweb.Server.models;
using quest4dealsweb.Server.Endpoints;
using quest4dealsweb.Server.Services;

var builder = WebApplication.CreateBuilder(args);

// CORS: Allow Vite frontend with credentials
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowViteFrontend",
        policy =>
        {
            policy.WithOrigins("https://localhost:51540") // Vite dev server
                  .AllowAnyMethod()
                  .AllowAnyHeader()
                  .AllowCredentials();
        });
});

// HttpClient for Nexarda API
builder.Services.AddHttpClient("NexardaClient", client =>
{
    client.BaseAddress = new Uri("https://www.nexarda.com/api/v3/");
    client.DefaultRequestHeaders.Add("Accept", "application/json");
});

builder.Services.AddMemoryCache();

// Database connection
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
if (string.IsNullOrEmpty(connectionString))
{
    throw new InvalidOperationException("The ConnectionString property has not been initialized. Check appsettings.json.");
}
builder.Services.AddDbContext<DataContext>(options =>
    options.UseSqlServer(connectionString));

// Identity configuration
builder.Services.AddIdentity<User, IdentityRole>(options =>
    {
        options.User.RequireUniqueEmail = true;
    })
    .AddEntityFrameworkStores<DataContext>()
    .AddSignInManager()
    .AddDefaultTokenProviders();

// Cookie authentication configuration
builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = "/api/auth/login";
    options.AccessDeniedPath = "/api/auth/access-denied";
    options.Cookie.Name = ".Quest4Deals.Auth";
    options.Cookie.HttpOnly = true;
    options.Cookie.SameSite = SameSiteMode.Lax; // Lax is usually best for SPA+API
    options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);
    options.SlidingExpiration = true;
    options.Events = new Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationEvents
    {
        OnRedirectToLogin = context =>
        {
            context.Response.StatusCode = 401;
            return Task.CompletedTask;
        },
        OnSigningIn = async context =>
        {
            var rememberMe = context.Properties.IsPersistent;
            if (!rememberMe)
            {
                context.CookieOptions.Expires = null;
            }
            else
            {
                context.CookieOptions.Expires = DateTimeOffset.UtcNow.AddDays(7);
            }
            await Task.CompletedTask;
        }
    };
});

builder.Services.AddAuthorization();
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddScoped<PriceHistoryService>();
builder.Services.AddScoped<quest4dealsweb.Server.Services.PriceHistoryService>();

var app = builder.Build();

app.UseCors("AllowViteFrontend");
app.UseDefaultFiles();
app.UseStaticFiles();

app.UseAuthentication();
app.UseAuthorization();

app.MapIdentityRoutes();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.MapControllers();
app.MapFallbackToFile("/index.html");

app.Run();


=======================================
FILE: quest4dealsweb.Server.csproj
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\quest4dealsweb.Server.csproj
=======================================

<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <SpaRoot>..\quest4dealsweb.client</SpaRoot>
    <SpaProxyLaunchCommand>npm run dev</SpaProxyLaunchCommand>
    <SpaProxyServerUrl>https://localhost:51540</SpaProxyServerUrl>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="MailKit" Version="4.11.0" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.2" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy">
      <Version>8.*-*</Version>
    </PackageReference>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\quest4dealsweb.client\quest4dealsweb.client.esproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>

</Project>



=======================================
FILE: quest4dealsweb.Server.csproj.user
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\quest4dealsweb.Server.csproj.user
=======================================

ï»¿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ActiveDebugProfile>https</ActiveDebugProfile>
  </PropertyGroup>
</Project>


=======================================
FILE: quest4dealsweb.Server.http
PATH: C:\Users\adria\Desktop\Quest4Deals\quest4dealsweb.Server\quest4dealsweb.Server.http
=======================================

@quest4dealsweb.Server_HostAddress = http://localhost:5039

GET {{quest4dealsweb.Server_HostAddress}}/weatherforecast/
Accept: application/json

###


